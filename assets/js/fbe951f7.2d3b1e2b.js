"use strict";(self.webpackChunkgo_kitx_webside=self.webpackChunkgo_kitx_webside||[]).push([[7065],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=a,u=m["".concat(c,".").concat(d)]||m[d]||g[d]||i;return t?r.createElement(u,o(o({ref:n},s),{},{components:t})):r.createElement(u,o({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2986:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return g}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],l={slug:"opentrace-demo",title:"Opentrace Demo",authors:["sado"],tags:["golang","opentrace","gorm","redis","mysql"],date:"2022-05-24T18:40"},c=void 0,p={permalink:"/blog/opentrace-demo",source:"@site/blog/opentrace/2022-05-24-opentrace-demo.md",title:"Opentrace Demo",description:"\u4e00\u3001\u524d\u8a00",date:"2022-05-24T18:40:00.000Z",formattedDate:"May 24, 2022",tags:[{label:"golang",permalink:"/blog/tags/golang"},{label:"opentrace",permalink:"/blog/tags/opentrace"},{label:"gorm",permalink:"/blog/tags/gorm"},{label:"redis",permalink:"/blog/tags/redis"},{label:"mysql",permalink:"/blog/tags/mysql"}],readingTime:6.535,truncated:!0,authors:[{name:"sado",title:"Developer",url:"https://github.com/sado0823",imageURL:"/img/avatar.jpeg",key:"sado"}],frontMatter:{slug:"opentrace-demo",title:"Opentrace Demo",authors:["sado"],tags:["golang","opentrace","gorm","redis","mysql"],date:"2022-05-24T18:40"},prevItem:{title:"Clean Architecture",permalink:"/blog/clean-architecture"},nextItem:{title:"Rpc And Opentrace",permalink:"/blog/rpc-opentrace"}},s={authorsImageUrls:[void 0]},g=[{value:"\u4e00\u3001\u524d\u8a00",id:"\u4e00\u524d\u8a00",level:2},{value:"\u4e8c\u3001\u51c6\u5907",id:"\u4e8c\u51c6\u5907",level:2},{value:"\u4e09\u3001\u5b9e\u73b0",id:"\u4e09\u5b9e\u73b0",level:2},{value:"1) gorm \u63d2\u4ef6:",id:"1-gorm-\u63d2\u4ef6",level:3},{value:"2) redis hook",id:"2-redis-hook",level:3},{value:"3) iris middleware",id:"3-iris-middleware",level:3},{value:"\u56db\u3001\u6548\u679c",id:"\u56db\u6548\u679c",level:2},{value:"1) \u6982\u89c8",id:"1-\u6982\u89c8",level:3},{value:"2) mysql",id:"2-mysql",level:3},{value:"3) redis",id:"3-redis",level:3},{value:"\u4e94\u3001\u6e90\u7801",id:"\u4e94\u6e90\u7801",level:2}],m={toc:g};function d(e){var n=e.components,l=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,l,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"\u4e00\u524d\u8a00"},"\u4e00\u3001\u524d\u8a00"),(0,i.kt)("p",null,"\u200b\t\t\u4e0a\u6587\u4ecb\u7ecd\u4e86 ",(0,i.kt)("inlineCode",{parentName:"p"},"trace")," \u7684 \u7531\u6765, \u4ee5\u53ca\u7b80\u5355\u5e94\u7528, \u4eca\u5929\u6211\u4eec\u5c31\u6765\u5b9e\u9645\u7528\u4ee3\u7801\u64cd\u4f5c\u4e00\u4e0b, \u770b\u770b\u5230\u5e95\u5982\u4f55\u7b80\u5355, \u65b9\u4fbf\u7684\u5728\u9879\u76ee\u4e2d\u63a5\u5165 ",(0,i.kt)("inlineCode",{parentName:"p"},"trace")),(0,i.kt)("p",null,"\u200b\t\t\u4e00\u822c\u6211\u4eec\u4f1a\u91c7\u7528\u4e2d\u95f4\u4ef6\u7684\u65b9\u5f0f\u5728web\u5e93\u4e2d\u63a5\u5165, \u5404\u5927\u4e3b\u6d41\u7684web\u5e93(\u5982",(0,i.kt)("inlineCode",{parentName:"p"},"gin"),",",(0,i.kt)("inlineCode",{parentName:"p"},"iris"),")\u90fd\u6709\u81ea\u5df1\u7684\u4e2d\u95f4\u4ef6\u65b9\u5f0f, \u6574\u4f53\u4e0a\u90fd\u662f\u5927\u540c\u5c0f\u5f02\u7684, \u7531\u4e8e\u4f5c\u8005\u7684\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u662f",(0,i.kt)("inlineCode",{parentName:"p"},"iris"),"\u5e93, \u4eca\u5929\u6211\u4eec\u91c7\u7528 ",(0,i.kt)("inlineCode",{parentName:"p"},"iris")," \u6765\u8fdb\u884cdemo\u6f14\u793a"),(0,i.kt)("h2",{id:"\u4e8c\u51c6\u5907"},"\u4e8c\u3001\u51c6\u5907"),(0,i.kt)("p",null,"1\u3001",(0,i.kt)("inlineCode",{parentName:"p"},"iris"),"  ","[https://github.com/kataras/iris]"),(0,i.kt)("p",null,"2\u3001",(0,i.kt)("inlineCode",{parentName:"p"},"redis"),"  ","[https://github.com/go-redis/redis]"),(0,i.kt)("p",null,"3\u3001",(0,i.kt)("inlineCode",{parentName:"p"},"gorm")," ","[https://github.com/go-gorm/gorm]"),(0,i.kt)("h2",{id:"\u4e09\u5b9e\u73b0"},"\u4e09\u3001\u5b9e\u73b0"),(0,i.kt)("p",null,"\u200b\t\t\u5b9e\u73b0\u7684\u539f\u7406\u5176\u5b9e\u4e5f\u5f88\u7b80\u5355, \u4e3b\u8981\u662f\u901a\u8fc7 ",(0,i.kt)("inlineCode",{parentName:"p"},"golang")," \u7684\u5185\u7f6e\u5305 ",(0,i.kt)("inlineCode",{parentName:"p"},"context"),"\u8fdb\u884c\u53d8\u91cf\u4f20\u9012, \u518d\u4e0d\u901a\u8fc7\u7684\u8c03\u7528\u5904\u90fd\u5f00\u542f\u4e00\u4e2a\u65b0\u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"span"),", \u6700\u7ec8\u6240\u6709\u7684span\u90fd\u8fde\u63a5\u8d77\u6765, \u5c31\u662f\u5b9e\u73b0\u4e86\u6211\u4eec\u7684\u6574\u4e2a\u94fe\u8def\u4e86, \u5176\u5b9e ",(0,i.kt)("inlineCode",{parentName:"p"},"rpc")," \u7684\u8c03\u7528\u901a\u7528\u53ef\u4ee5\u52a0\u4e0a\u53bb"),(0,i.kt)("p",null,"\u200b\t\t\u539f\u7406\u5f04\u6e05\u695a\u4e4b\u540e, \u5c31\u8981\u5f00\u59cb\u5199\u4ee3\u7801\u4e86, \u90a3\u4e48\u600e\u4e48\u5728",(0,i.kt)("inlineCode",{parentName:"p"},"redis"),"\u4e5f\u597d, ",(0,i.kt)("inlineCode",{parentName:"p"},"gorm"),"\u4e5f\u597d, \u6211\u4eec\u4f20\u5165",(0,i.kt)("inlineCode",{parentName:"p"},"context"),"\u7684\u65f6\u5019, \u7a0b\u5e8f\u5c31\u4f1a\u5e2e\u6211\u4eec\u81ea\u52a8\u5904\u7406\u751f\u6210",(0,i.kt)("inlineCode",{parentName:"p"},"trace"),"\u5462?"),(0,i.kt)("p",null,"\u200b\t\t\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u6211\u4eec\u53bb\u505a\u4e00\u4e9b\u9762\u5411\u5207\u9762\u7684\u4e1c\u897f, ",(0,i.kt)("inlineCode",{parentName:"p"},"gorm"),"\u91cc\u9762\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u63d2\u4ef6\u6765\u505a, ",(0,i.kt)("inlineCode",{parentName:"p"},"redis"),"\u8fd9\u4e2a\u4e5f\u6709\u540c\u6837\u7684\u5b9e\u73b0"),(0,i.kt)("p",null,"\u200b\t\t"),(0,i.kt)("h3",{id:"1-gorm-\u63d2\u4ef6"},"1) gorm \u63d2\u4ef6:"),(0,i.kt)("p",null,"gorm\u4e2d\u7684\u63d2\u4ef6\u5b9a\u4e49\u662f\u4e3a",(0,i.kt)("inlineCode",{parentName:"p"},"interface")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"type Plugin interface {\n    Name() string\n    Initialize(*DB) error\n}\nPlugin GORM plugin interface\n")),(0,i.kt)("p",null,"\u6211\u4eec\u53ea\u9700\u8981\u5b9e\u73b0\u8fd9\u4e2a ",(0,i.kt)("inlineCode",{parentName:"p"},"interface")," \u5373\u53ef\u4f7f\u7528:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "fmt"\n    "github.com/opentracing/opentracing-go"\n    "github.com/opentracing/opentracing-go/ext"\n    tracerLog "github.com/opentracing/opentracing-go/log"\n    "gorm.io/driver/mysql"\n    "gorm.io/gorm"\n    "strings"\n)\n\nconst (\n    callBackBeforeName = "opentracing:before"\n    callBackAfterName  = "opentracing:after"\n)\n\ntype OpenTracingPlugin struct{}\n\nvar _ gorm.Plugin = &OpenTracingPlugin{}\n\nfunc (op *OpenTracingPlugin) Name() string {\n    return "openTracingPlugin"\n}\n\nfunc (op *OpenTracingPlugin) Initialize(db *gorm.DB) (err error) {\n    // \u5f00\u59cb\u524d - \u5e76\u4e0d\u662f\u90fd\u7528\u76f8\u540c\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u81ea\u5df1\u81ea\u5b9a\u4e49\n    db.Callback().Create().Before("gorm:before_create").Register(callBackBeforeName, before)\n    db.Callback().Query().Before("gorm:query").Register(callBackBeforeName, before)\n    db.Callback().Delete().Before("gorm:before_delete").Register(callBackBeforeName, before)\n    db.Callback().Update().Before("gorm:setup_reflect_value").Register(callBackBeforeName, before)\n    db.Callback().Row().Before("gorm:row").Register(callBackBeforeName, before)\n    db.Callback().Raw().Before("gorm:raw").Register(callBackBeforeName, before)\n\n    // \u7ed3\u675f\u540e - \u5e76\u4e0d\u662f\u90fd\u7528\u76f8\u540c\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u81ea\u5df1\u81ea\u5b9a\u4e49\n    db.Callback().Create().After("gorm:after_create").Register(callBackAfterName, after)\n    db.Callback().Query().After("gorm:after_query").Register(callBackAfterName, after)\n    db.Callback().Delete().After("gorm:after_delete").Register(callBackAfterName, after)\n    db.Callback().Update().After("gorm:after_update").Register(callBackAfterName, after)\n    db.Callback().Row().After("gorm:row").Register(callBackAfterName, after)\n    db.Callback().Raw().After("gorm:raw").Register(callBackAfterName, after)\n    return\n}\n\n// do logic\nconst _GormSpan = "_GormSpan"\n\nfunc before(db *gorm.DB) {\n\n    if !opentracing.IsGlobalTracerRegistered() {\n        return\n    }\n\n    operationName := fmt.Sprintf("Mysql - %s", db.Statement.Schema.Table)\n\n    span, _ := opentracing.StartSpanFromContext(db.Statement.Context, operationName)\n\n    span.SetTag(string(ext.DBType), "sql")\n    span.SetTag("db.table", db.Statement.Schema.Table)\n\n    a, ok := db.Statement.Config.Dialector.(*mysql.Dialector)\n    if ok {\n        index := strings.Index(a.DSN, "tcp(")\n        span.SetTag(string(ext.DBInstance), a.DSN[index:])\n    }\n\n    // \u8bb0\u5f55\u5f53\u524dspan\n    db.InstanceSet(_GormSpan, span)\n\n}\n\nfunc after(db *gorm.DB) {\n\n    _span, isExist := db.InstanceGet(_GormSpan)\n    if !isExist {\n        return\n    }\n\n    span, ok := _span.(opentracing.Span)\n    if !ok {\n        return\n    }\n\n    defer span.Finish()\n\n    // Error\n    if db.Error != nil {\n        ext.Error.Set(span, true)\n        span.LogFields(tracerLog.Error(db.Error))\n    }\n\n  // \u8bb0\u5f55sql\n    span.SetTag(string(ext.DBStatement), db.Dialector.Explain(db.Statement.SQL.String(), db.Statement.Vars...))\n    span.LogFields(tracerLog.String("sql", db.Dialector.Explain(db.Statement.SQL.String(), db.Statement.Vars...)))\n  \n  // \u8bb0\u5f55\u5f71\u54cd\u884c\u6570\n    span.SetTag("db.count", db.RowsAffected)\n  \n  // \u622a\u53d6 sql \u8868\u793a\u8bb0\u5f55\u65b9\u6cd5\n    span.SetTag("db.method", strings.ToUpper(strings.Split(db.Statement.SQL.String(), " ")[0]))\n\n}\n')),(0,i.kt)("p",null,"\u5982\u4f55\u4f7f\u7528 ?"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"// \u5b9e\u4f8b\u5316gorm db\u540e, \u76f4\u63a5\u8c03\u7528 use \u65b9\u6cd5\u8fdb\u884c\u63d2\u4ef6\u4f7f\u7528\n_db.Use(&OpenTracingPlugin{})\n")),(0,i.kt)("p",null,"\u200b\t"),(0,i.kt)("h3",{id:"2-redis-hook"},"2) redis hook"),(0,i.kt)("p",null,"\u5728\u6211\u4eec\u4f7f\u7528\u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"redis"),"\u5305\u4e2d, \u4e0a\u8ff0\u529f\u80fd\u53eb\u505a",(0,i.kt)("inlineCode",{parentName:"p"},"hook"),", \u5176\u5b9e",(0,i.kt)("inlineCode",{parentName:"p"},"hook"),"\u7684\u5b9a\u4e49\u540c\u6837\u4e3a\u4e00\u4e2a",(0,i.kt)("inlineCode",{parentName:"p"},"interface"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"type Hook interface {\n    BeforeProcess(ctx context.Context, cmd Cmder) (context.Context, error)\n    AfterProcess(ctx context.Context, cmd Cmder) error\n    BeforeProcessPipeline(ctx context.Context, cmds []Cmder) (context.Context, error)\n    AfterProcessPipeline(ctx context.Context, cmds []Cmder) error\n}\n")),(0,i.kt)("p",null,"\u540c\u7406, \u6211\u4eec\u6765\u5b9e\u73b0\u8fd9\u4e2a ",(0,i.kt)("inlineCode",{parentName:"p"},"interface"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "context"\n    "fmt"\n    "github.com/go-redis/redis/v8"\n    "github.com/opentracing/opentracing-go"\n    "github.com/opentracing/opentracing-go/ext"\n    tracerLog "github.com/opentracing/opentracing-go/log"\n    "github.com/pkg/errors"\n)\n\ntype TracingHook struct{}\n\ntype RedisSpanKey string\n\nconst _RedisSpan RedisSpanKey = "_RedisSpan"\n\nvar _ redis.Hook = TracingHook{}\n\nfunc (TracingHook) BeforeProcess(ctx context.Context, cmd redis.Cmder) (context.Context, error) {\n\n    if !opentracing.IsGlobalTracerRegistered() {\n        return ctx, nil\n    }\n\n    operationName := fmt.Sprintf("Redis - %s", cmd.Name())\n    span, _ := opentracing.StartSpanFromContext(ctx, operationName)\n\n    span.SetTag(string(ext.DBType), "redis")\n    span.SetTag("redis.name", cmd.Name())\n    span.SetTag("redis.full_name", cmd.FullName())\n    span.LogKV("redis.cmd", cmd.String(), "redis.args", cmd.Args())\n\n    withValueCtx := context.WithValue(ctx, _RedisSpan, span)\n\n    return withValueCtx, nil\n\n}\n\nfunc (TracingHook) AfterProcess(ctx context.Context, cmd redis.Cmder) error {\n    v := ctx.Value(_RedisSpan)\n    if span, ok := v.(opentracing.Span); ok {\n        defer span.Finish()\n\n        if err := cmd.Err(); err != nil && !errors.Is(err, redis.Nil) {\n            ext.Error.Set(span, true)\n            span.LogFields(tracerLog.Error(cmd.Err()))\n        }\n\n    }\n\n    return nil\n}\n\nfunc (TracingHook) BeforeProcessPipeline(ctx context.Context, cmds []redis.Cmder) (context.Context, error) {\n\n    if !opentracing.IsGlobalTracerRegistered() {\n        return ctx, nil\n    }\n\n    operationName := fmt.Sprintf("Redis - %s", "Pipeline")\n    span, _ := opentracing.StartSpanFromContext(ctx, operationName)\n\n    cmdMap := make(map[int]string)\n    for index, cmd := range cmds {\n        cmdMap[index] = cmd.String()\n    }\n\n    span.SetTag(string(ext.DBType), "redis")\n    span.LogKV("Pipeline", cmdMap)\n\n    withValueCtx := context.WithValue(ctx, _RedisSpan, span)\n\n    return withValueCtx, nil\n\n}\n\nfunc (TracingHook) AfterProcessPipeline(ctx context.Context, cmds []redis.Cmder) error {\n    v := ctx.Value(_RedisSpan)\n    if span, ok := v.(opentracing.Span); ok {\n        defer span.Finish()\n\n        for _, cmd := range cmds {\n            if err := cmd.Err(); err != nil {\n                ext.Error.Set(span, true)\n                span.LogFields(tracerLog.Error(cmd.Err()))\n            }\n        }\n\n    }\n\n    return nil\n\n}\n')),(0,i.kt)("p",null,"\u8fd9\u6837\u5728\u6211\u4eec\u5b9e\u4f8b\u5316",(0,i.kt)("inlineCode",{parentName:"p"},"redis"),"\u4e4b\u540e, \u5373\u53ef\u76f4\u63a5\u4f7f\u7528"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"redisDB.AddHook(TracingHook{})\n")),(0,i.kt)("h3",{id:"3-iris-middleware"},"3) iris middleware"),(0,i.kt)("p",null,"\u63a5\u4e0b\u6765, \u6211\u4eec\u9700\u8981\u7f16\u5199\u4e00\u4e2a ",(0,i.kt)("inlineCode",{parentName:"p"},"iris"),"\u7684\u4e2d\u95f4\u4ef6, \u8ba9\u6bcf\u6b21\u8bf7\u6c42\u8fdb\u6765\u7684\u65f6\u5019, \u81ea\u52a8\u5f00\u542f\u4e00\u6761\u65b0\u7684\u94fe\u8def"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'func Trace() iris.Handler {\n    return func(c iris.Context) {\n\n        var parentSpan opentracing.Span\n\n        spCtx, err := opentracing.GlobalTracer().Extract(opentracing.HTTPHeaders, opentracing.HTTPHeadersCarrier(c.Request().Header))\n        if err != nil {\n            parentSpan = opentracing.GlobalTracer().StartSpan(\n                c.Request().URL.Path,\n            )\n        } else {\n            parentSpan = opentracing.GlobalTracer().StartSpan(\n                "call grpc",\n                opentracing.ChildOf(spCtx),\n                ext.SpanKindRPCServer,\n            )\n        }\n\n        // \u91cd\u7f6erequest ctx\n        ctx := opentracing.ContextWithSpan(c.Request().Context(), parentSpan)\n        c.ResetRequest(c.Request().WithContext(ctx))\n        defer parentSpan.Finish()\n\n        c.Next()\n\n    }\n}\n')),(0,i.kt)("p",null,"4) \u542f\u52a8"),(0,i.kt)("p",null,"\u521d\u59cb\u5316\u4e00\u4e2a\u5168\u5c40 ",(0,i.kt)("inlineCode",{parentName:"p"},"tracer"),", \u5e76\u4e14\u542f\u52a8\u670d\u52a1:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "github.com/go-redis/redis/v8"\n    "github.com/kataras/iris/v12"\n    "github.com/kataras/iris/v12/context"\n    "github.com/opentracing/opentracing-go"\n    "github.com/uber/jaeger-client-go"\n    jaegerConfig "github.com/uber/jaeger-client-go/config"\n    "gorm-trace/middleware"\n    mysql2 "gorm-trace/mysql"\n    redis2 "gorm-trace/redis"\n    "gorm.io/driver/mysql"\n    "gorm.io/gorm"\n    "time"\n)\n\nfunc main() {\n\n    // \u521d\u59cb\u5316trace\n    cfg := &jaegerConfig.Configuration{\n        Sampler: &jaegerConfig.SamplerConfig{\n            Type:  "const", //\u56fa\u5b9a\u91c7\u6837\n            Param: 1,       //1=\u5168\u91c7\u6837\u30010=\u4e0d\u91c7\u6837\n        },\n\n        Reporter: &jaegerConfig.ReporterConfig{\n            LogSpans:           true,\n            LocalAgentHostPort: "0.0.0.0:6831",\n        },\n\n        ServiceName: "test-trace",\n    }\n\n    tracer, closer, err := cfg.NewTracer(jaegerConfig.Logger(jaeger.StdLogger))\n    if err != nil {\n        panic(fmt.Sprintf("ERROR: cannot init Jaeger: %v\\n", err.Error()))\n    }\n    defer closer.Close()\n\n    opentracing.SetGlobalTracer(tracer)\n\n    app := iris.New()\n\n    // \u8c03\u7528trace \u4e2d\u95f4\n    app.Use(middleware.Trace())\n\n    app.Get("/trace", func(context context.Context) {\n\n        type User struct {\n            ID   int64\n            Name string\n        }\n        res := make([]*User, 0)\n        // \u521d\u59cb\u5316mysql\n        sqlDB := initMysql()\n        sqlDB.WithContext(context.Request().Context()).Table("users").Limit(1).Find(&res)\n\n        // \u521d\u59cb\u5316redis\n        redisDB := initRedis()\n        redisDB.Set(context.Request().Context(), "i-am-key", "i-am-value", time.Hour)\n\n    })\n\n    err = app.Listen(":7787")\n    if err != nil {\n        panic("init web fail")\n    }\n\n}\n\nfunc initMysql() *gorm.DB {\n    db, err := gorm.Open(mysql.New(mysql.Config{\n        DSN: fmt.Sprintf("%s/%s?charset=utf8mb4&parseTime=True&loc=Local",\n            "root:root@tcp(127.0.0.1:3306)", "gongjiayun"), // DSN data source name, parse time is important !!!\n        DefaultStringSize:         256,                     // string default length\n        SkipInitializeWithVersion: true,                    // auto config according to version\n    }), &gorm.Config{})\n    if err != nil {\n        panic("fail to init mysql: " + err.Error())\n    }\n\n    _ = db.Use(&mysql2.OpenTracingPlugin{})\n\n    return db\n}\n\nfunc initRedis() *redis.Client {\n    redisDB := redis.NewClient(&redis.Options{\n        Addr: ":6379",\n    })\n\n    redisDB.AddHook(redis2.TracingHook{})\n    return redisDB\n}\n\n')),(0,i.kt)("p",null,"\u200b\t"),(0,i.kt)("h2",{id:"\u56db\u6548\u679c"},"\u56db\u3001\u6548\u679c"),(0,i.kt)("h3",{id:"1-\u6982\u89c8"},"1) \u6982\u89c8"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image-20210419215247142",src:t(4601).Z,width:"3258",height:"956"})),(0,i.kt)("h3",{id:"2-mysql"},"2) mysql"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image-20210419215359449",src:t(146).Z,width:"2722",height:"1024"})),(0,i.kt)("h3",{id:"3-redis"},"3) redis"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image-20210419215511821",src:t(6319).Z,width:"2964",height:"922"})),(0,i.kt)("p",null,"\u4ee5\u4e0a\u94fe\u8def\u4e2d\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"tag"),"\u4fe1\u606f\u662f\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u9700\u6c42\u81ea\u5b9a\u4e49\u7684"),(0,i.kt)("h2",{id:"\u4e94\u6e90\u7801"},"\u4e94\u3001\u6e90\u7801"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/sado0823/gorm-redis-trace"},"https://github.com/sado0823/gorm-redis-trace")))}d.isMDXComponent=!0},4601:function(e,n,t){n.Z=t.p+"assets/images/image-20210419215247142-a450f1117d3442da96cdfea9f47c9efa.png"},146:function(e,n,t){n.Z=t.p+"assets/images/image-20210419215359449-a946618abc852eee0ce280833722cc10.png"},6319:function(e,n,t){n.Z=t.p+"assets/images/image-20210419215511821-b8b49b7ca1079088bc8ba770697c0f4b.png"}}]);