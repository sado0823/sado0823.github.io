"use strict";(self.webpackChunkgo_kitx_webside=self.webpackChunkgo_kitx_webside||[]).push([[1477],{10:function(n){n.exports=JSON.parse('{"blogPosts":[{"id":"bloom-filter","metadata":{"permalink":"/blog/bloom-filter","source":"@site/blog/2022-05-25-bloom-filter.md","title":"Go Bloom Filter","description":"A go bloom filter , base on different implement like redis ...","date":"2022-05-25T00:22:00.000Z","formattedDate":"May 25, 2022","tags":[{"label":"golang","permalink":"/blog/tags/golang"},{"label":"bloom","permalink":"/blog/tags/bloom"},{"label":"redis","permalink":"/blog/tags/redis"}],"readingTime":3.14,"truncated":true,"authors":[{"name":"sado","title":"Developer","url":"https://github.com/sado0823","imageURL":"/img/avatar.jpeg","key":"sado"}],"frontMatter":{"slug":"bloom-filter","title":"Go Bloom Filter","authors":["sado"],"tags":["golang","bloom","redis"],"date":"2022-05-25T00:22"},"nextItem":{"title":"Clean Architecture","permalink":"/blog/clean-architecture"}},"content":"<br></br>\\nA go bloom filter , base on different implement like `redis` ...\\n\\n## what?\\n\\n```js\\n\u4e0a\u4e00\u7bc7\u5728\u63d0\u5230\u7f13\u5b58\u51fb\u7a7f\u7684\u65f6\u5019, \u6709\u4e00\u79cd\u89e3\u51b3\u529e\u6cd5\u5c31\u662f\u5e03\u9686\u8fc7\u6ee4\u5668\\n\\n\\n\u5e03\u9686\u8fc7\u6ee4\u5668\uff08\u82f1\u8a9e\uff1aBloom Filter\uff09\u662f1970\u5e74\u7531\u5e03\u9686\u63d0\u51fa\u7684\u3002 \u5b83\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5f88\u957f\u7684\u4e8c\u8fdb\u5236\u5411\u91cf\u548c\u4e00\u7cfb\u5217\u968f\u673a\u6620\u5c04\u51fd\u6570\u3002 \u5e03\u9686\u8fc7\u6ee4\u5668\u53ef\u4ee5\u7528\u4e8e\u68c0\u7d22\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002 \u5b83\u7684\u4f18\u70b9\u662f\u7a7a\u95f4\u6548\u7387\u548c\u67e5\u8be2\u65f6\u95f4\u90fd\u8fdc\u8fdc\u8d85\u8fc7\u4e00\u822c\u7684\u7b97\u6cd5\uff0c\u7f3a\u70b9\u662f\u6709\u4e00\u5b9a\u7684\u8bef\u8bc6\u522b\u7387\u548c\u5220\u9664\u56f0\u96be\\n\\n```\\n\\n\x3c!--truncate--\x3e\\n\\n## why?\\n\\n```js\\n\u5e03\u9686\u8fc7\u6ee4\u5668: \u53ef\u4ee5\u5224\u65ad\u67d0\u5143\u7d20\u5728\u4e0d\u5728\u96c6\u5408\u91cc\u9762, \u56e0\u4e3a\u5b58\u5728\u4e00\u5b9a\u7684\u8bef\u5224\u548c\u5220\u9664\u590d\u6742\u95ee\u9898;\\n```\\n\\n\u4e00\u822c\u7684\u4f7f\u7528\u573a\u666f\u662f:\\n\\n- \u9632\u6b62\u7f13\u5b58\u51fb\u7a7f(\u9632\u6b62\u6076\u610f\u653b\u51fb)\\n- \u5783\u573e\u90ae\u7bb1\u8fc7\u6ee4\\n- cache digests (\u7f13\u5b58\u7d22\u5f15)\\n- \u6a21\u578b\u68c0\u6d4b\u5668\\n- \u5224\u65ad\u662f\u5426\u5b58\u5728\u67d0\u884c\u6570\u636e,\u7528\u4ee5\u51cf\u5c11\u5bf9\u78c1\u76d8\u8bbf\u95ee\uff0c\u63d0\u9ad8\u670d\u52a1\u7684\u8bbf\u95ee\u6027\u80fd\\n\\n## how?\\n\\n### \u57fa\u672c\u601d\u60f3\\n\\n\u901a\u8fc7\u591a\u4e2a`hash`\u65b9\u6cd5, \u8fdb\u884c\u591a\u6b21 hash \u64cd\u4f5c, \u4f7f\u5176\u503c\u4f4d\u4e8e`bit`\u4e0d\u540c\u4f4d\u4e0a, \u68c0\u6d4b\u8be5`bit`\u4e0a\u7684\u6570\u636e\u662f\u5426\u4e3a`1`, \u4ece\u800c\u5224\u65ad\u662f\u5426\u5b58\u5728\\n\\n![image-20210912175241849](./bloom-filter.assets/image-bloom.png)\\n\\n### \u6e90\u7801\u5206\u6790\\n\\n`interface: bloom.go`\\n\\n```go\\n// \u8fc7\u6ee4\u5668\u7684\u6838\u5fc3\u5b9e\u73b0, \u901a\u8fc7interface\u7684\u65b9\u5f0f, \u53ef\u4ee5\u652f\u6301\u591a\u79cd\u5b9e\u73b0\\n// \u76ee\u524d\u5b9e\u73b0\u4e86\u57fa\u4e8eredis bit\u6570\u636e\u7c7b\u578b\u7684\u8fc7\u6ee4\u5668\\nProvider interface {\\n\\t\\tAdd(data []byte) error\\n\\t\\tExists(data []byte) (bool, error)\\n}\\n\\n// Filter is a bloom filter\\nFilter struct {\\n\\n\\t\\t// todo counter\\n\\t\\ttotal int64\\n\\t\\thit   int64\\n\\t\\tmiss  int64\\n\\n\\t\\tprovider Provider\\n}\\n```\\n\\n`redis\u5b9e\u73b0: internal/redis/redis_bit.go`\\n\\n```js\\n// \u5b9e\u73b0Provider\u63a5\u53e3\u7684\u4e24\u4e2a\u65b9\u6cd5\\n\\n// Add implement Provider interface\\nfunc (r *Provider) Add(data []byte) error {\\n\\tlocation := r.getBitLocation(data)\\n\\treturn r.set(location)\\n}\\n\\n// Exists implement Provider interface\\nfunc (r *Provider) Exists(data []byte) (bool, error) {\\n\\tlocation := r.getBitLocation(data)\\n\\treturn r.check(location)\\n}\\n\\n// \u6838\u5fc3\u65b9\u6cd5\\n// \u901a\u8fc714\u6b21hash, \u6bcf\u6b21hash\u90fd\u5728\u6570\u636e\u6700\u540e\u8ffd\u52a0\u4e00\u4e2abyte(index), \u6700\u540e\u8fdb\u884c\u53d6\u6a21, \u5206\u5e03\u5728map\u91cc\u9762\u7684\u6bcf\u4e2a\u533a\u95f4\\n// \u68c0\u67e5\u662f\u5426\u5b58\u5728\u65f6, \u5bf9\u6bcf\u4e2abit\u4f4d\u8fdb\u884c\u5224\u65ad, \u5982\u679c\u6709\u4e00\u4e2a\u7b49\u4e8e0, \u5219\u6570\u636e\u4e0d\u5b58\u5728\\n// getBitLocation return data hash to bit location\\nfunc (r *Provider) getBitLocation(data []byte) []uint {\\n\\tl := make([]uint, maps)\\n\\tfor i := 0; i < maps; i++ {\\n\\t\\thashV := r.hash(append(data, byte(i)))\\n\\t\\tl[i] = uint(hashV % uint64(maps))\\n\\t}\\n\\treturn l\\n}\\n```\\n\\n`todo`\\n\\n```js\\n1) \u53ef\u4ee5\u5b9e\u73b0\u7edf\u8ba1\u6570\u636e, \u6bd4\u5982\u603b\u91cf, \u547d\u4e2d\u7387, \u4e22\u5931\u7387\u7b49\\n\\n2) \u5b9e\u73b0\u5176\u5b83bloom\u8fc7\u6ee4\u5668provider(\u76ee\u524d\u53ea\u6709\u57fa\u4e8eredis bit)\\n```\\n\\n### example\\n\\n```go\\nfunc test() {\\n\\tfilter := NewRedis(\\"127.0.0.1:6379\\", \\"test-bloom\\", 1024)\\n\\n\\t_ = filter.Add([]byte(\\"a\\"))\\n\\t_ = filter.Add([]byte(\\"b))\\n\\n\\t_, _ = filter.Exists([]byte(\\"a))\\n\\t_, _ = filter.Exists([]byte(\\"p))\\n}\\n\\n```\\n\\n## \u9879\u76ee\u5730\u5740\\n\\nhttps://github.com/sado0823/go-bloom\\n\\n## references\\n\\n1.https://github.com/tal-tech/go-zero\\n\\n2.http://pages.cs.wisc.edu/~cao/papers/summary-cache/node8.html"},{"id":"clean-architecture","metadata":{"permalink":"/blog/clean-architecture","source":"@site/blog/2022-05-24-clean-architecture.md","title":"Clean Architecture","description":"&ensp;&ensp;&ensp;&ensp;\u6700\u8fd1\u611f\u89c9\u7f51\u7edc\u4e0a\u8d29\u5356\u7684\u7126\u8651\u5b9e\u5728\u662f\u592a\u591a\u4e86, \u5176\u5b9e\u4ee5\u524d\u4e5f\u591a\u591a\u5c11\u5c11\u6709\u8fd9\u79cd\u611f\u89c9, \u6700\u8fd1\u5c24\u4e3a\u4e25\u91cd, \u53ef\u80fd\u4e5f\u548c\u5f00\u5e74\u540e\u5de5\u4f5c\u5f3a\u5ea6\u53d8\u5927\u6709\u5173\u5427, \u641e\u7684\u8eab\u5fc3\u6bd4\u8f83\u75b2\u60eb. \u4e00\u4e9b\u4e13\u4e1a\u6027\u6bd4\u8f83\u5f3a\u7684\u4e66\u4e5f\u770b\u4e0d\u8fdb\u53bb\u4e86, \u62ff\u8d77\u6765\u4e4b\u524d\u6ca1\u6709\u770b\u5b8c\u7684 Bob \u5927\u53d4\u6574\u6d01\u7cfb\u5217\u7684\u4e66\u6162\u6162\u770b\u5b8c\u4e86, \u4e0d\u5f97\u4e0d\u8bf4, \u770b\u4e66\u786e\u5b9e\u662f\u4e00\u79cd\u6bd4\u8f83\u597d\u7684\u964d\u538b\u65b9\u5f0f, \u672c\u7bc7\u6587\u7ae0\u4e3b\u8981\u8bb0\u5f55\u4e00\u4e9b\u4e66\u4e2d\u7684\u5185\u5bb9.","date":"2022-05-24T22:25:00.000Z","formattedDate":"May 24, 2022","tags":[{"label":"architecture","permalink":"/blog/tags/architecture"},{"label":"uncle bob","permalink":"/blog/tags/uncle-bob"}],"readingTime":14.405,"truncated":true,"authors":[{"name":"sado","title":"Developer","url":"https://github.com/sado0823","imageURL":"/img/avatar.jpeg","key":"sado"}],"frontMatter":{"slug":"clean-architecture","title":"Clean Architecture","authors":["sado"],"tags":["architecture","uncle bob"],"date":"2022-05-24T22:25"},"prevItem":{"title":"Go Bloom Filter","permalink":"/blog/bloom-filter"},"nextItem":{"title":"Docker And Docker-Compose","permalink":"/blog/docker-and-compose"}},"content":"&ensp;&ensp;&ensp;&ensp;\u6700\u8fd1\u611f\u89c9\u7f51\u7edc\u4e0a\u8d29\u5356\u7684\u7126\u8651\u5b9e\u5728\u662f\u592a\u591a\u4e86, \u5176\u5b9e\u4ee5\u524d\u4e5f\u591a\u591a\u5c11\u5c11\u6709\u8fd9\u79cd\u611f\u89c9, \u6700\u8fd1\u5c24\u4e3a\u4e25\u91cd, \u53ef\u80fd\u4e5f\u548c\u5f00\u5e74\u540e\u5de5\u4f5c\u5f3a\u5ea6\u53d8\u5927\u6709\u5173\u5427, \u641e\u7684\u8eab\u5fc3\u6bd4\u8f83\u75b2\u60eb. \u4e00\u4e9b\u4e13\u4e1a\u6027\u6bd4\u8f83\u5f3a\u7684\u4e66\u4e5f\u770b\u4e0d\u8fdb\u53bb\u4e86, \u62ff\u8d77\u6765\u4e4b\u524d\u6ca1\u6709\u770b\u5b8c\u7684 Bob \u5927\u53d4\u6574\u6d01\u7cfb\u5217\u7684\u4e66\u6162\u6162\u770b\u5b8c\u4e86, \u4e0d\u5f97\u4e0d\u8bf4, \u770b\u4e66\u786e\u5b9e\u662f\u4e00\u79cd\u6bd4\u8f83\u597d\u7684\u964d\u538b\u65b9\u5f0f, \u672c\u7bc7\u6587\u7ae0\u4e3b\u8981\u8bb0\u5f55\u4e00\u4e9b\u4e66\u4e2d\u7684\u5185\u5bb9.\\n\\n## 1) \u4ecb\u7ecd\\n\\n&ensp;&ensp;&ensp;&ensp;\u8fd9\u672c\u4e66\u4e3a Bob \u5927\u53d4(Robert C. Martin)\u7684\u8457\u540d\u4f5c\u54c1, \u540c\u7cfb\u5217\u7684\u8fd8\u6709\u300a\u4ee3\u7801\u6574\u6d01\u4e4b\u9053\u300b, \u90fd\u662f\u7ecf\u5178\u4f5c\u54c1, \u503c\u5f97\u9605\u8bfb. \u8be5\u4e66\u7cfb\u7edf\u7684\u5256\u6790\u4e86\u67b6\u6784\u8bbe\u8ba1\u7684\u7f18\u8d77, \u5185\u6db5\u4ee5\u53ca\u5e94\u7528\u573a\u666f.\\n\\n- \u7b2c 1 \u90e8\u5206\u63cf\u8ff0\u67b6\u6784\u8bbe\u8ba1\u7684`\u91cd\u70b9`\u4e0e`\u6a21\u5f0f`\\n\\n- \u7b2c 2~4 \u90e8\u5206\u4e3b\u8981\u4e3a`\u7f16\u7a0b\u8303\u5f0f`\\n\\n- \u7b2c 5 \u90e8\u5206\u4e3a\u67b6\u6784\u8bbe\u8ba1\u4e2d\u7684`\u7ec4\u4ef6\u8fb9\u754c`\u3001`\u8bbe\u8ba1\u6a21\u5f0f`\u7b49\\n\\n- \u7b2c 6 \u90e8\u5206\u4e3a`\u5b9e\u73b0\u7ec6\u8282`\\n- \u9644\u5f55\u90e8\u5206\u4e3a\u4f5c\u8005\u7684\u4e00\u4e9b\u4eb2\u8eab\u7ecf\u5386\u7b49\\n\\n&ensp;&ensp;&ensp;&ensp;\u8fd9\u4e2a\u7cfb\u5217\u5176\u5b9e\u8fd8\u6709\u4e00\u672c\u4f5c\u54c1 - \u300a\u4ee3\u7801\u6574\u6d01\u4e4b\u9053 - \u7a0b\u5e8f\u5458\u7684\u804c\u4e1a\u7d20\u517b\u300b(The Clean Coder - A code of Conduct For Professional Programmers), \u4e3b\u8981\u8bb2\u8ff0\u4f5c\u8005\u7684\u4e00\u4e9b\u7ecf\u5386, \u5982\u4f55\u8d70\u4e0a\u7f16\u7a0b\u9053\u8def\u7b49, \u540c\u6837\u63a8\u8350\u9605\u8bfb. \u8bfb\u5b8c\u4e0d\u7981\u611f\u53f9, \u5927\u795e\u7684\u6210\u957f\u4e4b\u8def\u4e5f\u4e0d\u662f\u4e00\u5e06\u98ce\u987a\u7684, \u5176\u4e2d\u7ecf\u9a8c\u867d\u7136\u4e0d\u80fd\u8bf4\u4e00\u5b9a\u9002\u7528\u4e8e\u73b0\u5728, \u4f46\u662f\u5b8c\u5168\u503c\u5f97\u6211\u4eec\u5b66\u4e60\u548c\u501f\u9274\u7684.\\n\\n\x3c!--truncate--\x3e\\n\\n## 2) \u8bbe\u8ba1\u4e0e\u67b6\u6784\u7a76\u7adf\u662f\u4ec0\u4e48\\n\\n### 1) \u76ee\u6807\\n\\n\u8f6f\u4ef6\u67b6\u6784\u7684\u7ec8\u6781\u76ee\u6807\\n\\n```js\\n\u7528\u6700\u5c0f\u7684\u4eba\u529b\u6210\u672c\u6ee1\u8db3\u6784\u5efa\u548c\u7ef4\u62a4\u8be5\u7cfb\u7edf\u7684\u9700\u6c42;\\n```\\n\\n### 2) \u4e24\u4e2a\u4ef7\u503c\u7ef4\u5ea6\\n\\n\u53ef\u4ee5\u4ece`\u4e24\u4e2a\u4ef7\u503c\u7ef4\u5ea6`\u6765\u63cf\u8ff0\\n\\n- #### \u884c\u4e3a\u4ef7\u503c\\n\\n\u662f\u6700\u76f4\u89c2\u7684\u4ef7\u503c\u7ef4\u5ea6, \u7a0b\u5e8f\u5458\u7684\u5de5\u4f5c\u5c31\u662f\u8ba9\u673a\u5668\u6309\u7167\u67d0\u79cd\u6307\u5b9a\u65b9\u5f0f\u8fd0\u884c, \u7ed9\u7cfb\u7edf\u7684\u4f7f\u7528\u8005\u521b\u9020\u6216\u8005\u63d0\u9ad8\u5229\u6da6.\\n\\n\u5927\u90e8\u5206\u7a0b\u5e8f\u5458\u8ba4\u4e3a\u8fd9\u5c31\u662f\u4ed6\u4eec\u7684\u5168\u90e8\u5de5\u4f5c. \u4ed6\u4eec\u7684\u5de5\u4f5c\u662f\u4e14\u4ec5\u662f:\\n\\n`\u6309\u7167\u9700\u6c42\u6587\u6863\u7f16\u5199\u4ee3\u7801, \u5e76\u4e14\u4fee\u590d\u4efb\u4f55Bug.`\\n\\n\u8fd9\u662f\u5927\u9519\u7279\u9519\u7684.\\n\\n- #### \u67b6\u6784\u4ef7\u503c\\n\\n\u8f6f\u4ef6\u7cfb\u7edf\u7684\u7b2c\u4e8c\u4e2a\u4ef7\u503c\u7ef4\u5ea6, \u662f\u6307\u8f6f\u4ef6\u7684\u7075\u6d3b\u6027, \u8f6f\u4ef6\u5fc5\u987b\u4fdd\u6301\u7075\u6d3b.\\n\\n\u4ece\u7cfb\u7edf\u76f8\u5173\u65b9\u7684\u89d2\u5ea6\u6765\u770b, \u4ed6\u4eec\u63d0\u51fa\u7684\u4e00\u7cfb\u5217\u7684\u53d8\u66f4\u9700\u6c42\u8303\u7574\u90fd\u662f\u7c7b\u4f3c\u7684, \u56e0\u6b64\u6210\u672c\u4e5f\u5e94\u8be5\u662f\u56fa\u5b9a\u7684.\\n\\n\u4f46\u662f\u4ece\u7814\u53d1\u8005\u89d2\u5ea6\u6765\u770b, \u7cfb\u7edf\u7528\u6237\u6301\u7eed\u4e0d\u65ad\u7684\u53d8\u66f4\u9700\u6c42\u5c31\u50cf\u662f\u8981\u6c42\u4ed6\u4eec\u4e0d\u505c\u7684\u7528\u4e00\u5806\u4e0d\u540c\u5f62\u72b6\u7684\u62fc\u56fe\u5757, \u62fc\u51fa\u4e00\u4e2a\u65b0\u7684\u5f62\u72b6, \u6574\u4e2a\u8fc7\u7a0b\u5c06\u4f1a\u8d8a\u6765\u8d8a\u56f0\u96be. `\u95ee\u9898\u7684\u6839\u6e90\u5c31\u662f\u7cfb\u7edf\u7684\u67b6\u6784\u8bbe\u8ba1`\\n\\n### 3) \u54ea\u4e2a\u4ef7\u503c\u7ef4\u5ea6\u66f4\u91cd\u8981\\n\\n&ensp;&ensp;&ensp;&ensp;\u4e0d\u540c\u7684\u4eba\u7ed9\u51fa\u7684\u7b54\u6848\u4f1a\u4e0d\u4e00\u6837. \u4e1a\u52a1\u90e8\u95e8\u89c9\u5f97\u7cfb\u7edf\u6b63\u5e38\u5de5\u4f5c\u5f88\u91cd\u8981, \u5f88\u591a\u5f00\u53d1\u4eba\u5458\u4e5f\u8ddf\u968f\u91c7\u53d6\u4e86\u8fd9\u79cd\u6001\u5ea6, \u4f46\u662f Bob \u5927\u53d4\u8ba4\u4e3a\u8fd9\u79cd\u6001\u5ea6\u662f\u9519\u8bef\u7684.\\n\\n- \u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c, \u4f46\u662f\u65e0\u6cd5\u4fee\u6539. \u90a3\u4e48\u5f53\u9700\u6c42\u53d8\u66f4\u65f6, \u5b83\u5c06\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c, \u6211\u4eec\u4e5f\u65e0\u6cd5\u4fee\u6539, \u56e0\u6b64\u4ef7\u503c\u4e3a 0\\n- \u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c, \u6613\u4e8e\u4fee\u6539. \u53ef\u4ee5\u968f\u7740\u7eed\u671f\u53d8\u5316\u4e0d\u65ad\u4fee\u6539, \u4e0d\u65ad\u4ea7\u751f\u4ef7\u503c.\\n\\n### 4) \u827e\u68ee\u8c6a\u5a01\u5c14\u77e9\u9635\\n\\n|  \u91cd\u8981\u4e14\u7d27\u6025  |   \u91cd\u8981\u4e0d\u7d27\u6025   |\\n| :----------: | :------------: |\\n| \u4e0d\u91cd\u8981\u4f46\u7d27\u6025 | \u4e0d\u91cd\u8981\u4e14\u4e0d\u7d27\u6025 |\\n\\n&ensp;&ensp;&ensp;&ensp;\u91cd\u8981\u7684\u4e8b\u60c5\u5360\u636e\u4e86\u524d\u9762\u4e24\u4f4d, \u5f00\u53d1\u4eba\u5458\u548c\u4e1a\u52a1\u90e8\u95e8\u7ecf\u5e38\u72af\u7684\u5171\u540c\u9519\u8bef\u5c31\u662f\u628a\u7b2c\u4e09\u4f18\u5148\u7ea7`\u4e0d\u91cd\u8981\u4f46\u7d27\u6025`\u7684\u4e8b\u60c5\u63d0\u5230\u4e86\u7b2c\u4e00\u4f18\u5148\u7ea7\u53bb\u505a, \u4e5f\u5c31\u662f\u8bf4\u6ca1\u6709\u628a`\u771f\u6b63\u7d27\u6025\u4e14\u91cd\u8981`\u548c`\u7d27\u6025\u4f46\u662f\u4e0d\u91cd\u8981`\u7684\u529f\u80fd\u5206\u5f00, \u8fd9\u4e2a\u9519\u8bef\u5bfc\u81f4\u4e86\u91cd\u8981\u7684\u4e8b\u88ab\u5ffd\u7565\u4e86, \u91cd\u8981\u7684\u7cfb\u7edf\u67b6\u6784\u95ee\u9898\u8ba9\u4f4d\u7ed9\u4e86\u4e0d\u91cd\u8981\u7684\u7cfb\u7edf\u884c\u4e3a\u529f\u80fd.\\n\\n&ensp;&ensp;&ensp;&ensp;\u4f46\u662f\u7814\u53d1\u4eba\u5458\u8fd8\u5fd8\u8bb0\u4e86\u4e00\u70b9, \u90a3\u5c31\u662f\u4e1a\u52a1\u90e8\u95e8\u539f\u672c\u5c31\u662f\u6ca1\u6709\u80fd\u529b\u8bc4\u4f30\u7cfb\u7edf\u67b6\u6784\u7684\u91cd\u8981\u7a0b\u5ea6\u7684, `\u8fd9\u672c\u6765\u5c31\u5e94\u8be5\u662f\u7814\u53d1\u4eba\u5458\u81ea\u5df1\u7684\u5de5\u4f5c\u804c\u8d23`.\\n\\n&ensp;&ensp;&ensp;&ensp;\u5982\u679c\u5ffd\u89c6\u8f6f\u4ef6\u67b6\u6784\u7684\u4ef7\u503c, \u7cfb\u7edf\u5c06\u4f1a\u53d8\u5f97\u8d8a\u6765\u8d8a\u96be\u4ee5\u7ef4\u62a4, \u7ec8\u4f1a\u6709\u4e00\u6761, \u7cfb\u7edf\u5c06\u4f1a\u53d8\u5f97\u65e0\u6cd5\u4fee\u6539. \u5982\u679c\u7cfb\u7edf\u53d8\u6210\u4e86\u8fd9\u4e2a\u6837\u5b50, \u90a3\u4e48\u8bf4\u660e\u8f6f\u4ef6\u5f00\u53d1\u56e2\u961f\u6ca1\u6709\u548c\u9700\u6c42\u65b9\u505a\u8db3\u591f\u7684\u6297\u4e89, \u6ca1\u6709\u5b8c\u6210\u81ea\u5df1\u5e94\u5c3d\u7684\u804c\u8d23.\\n\\n## 3) \u7f16\u7a0b\u8303\u5f0f\\n\\n&ensp;&ensp;&ensp;&ensp;\u7f16\u7a0b\u8303\u5f0f\u6307\u7684\u662f\u7a0b\u5e8f\u7684\u7f16\u5199\u6a21\u5f0f, \u4e0e\u5177\u4f53\u7684\u7f16\u7a0b\u8bed\u8a00\u5173\u7cfb\u8f83\u5c0f, \u8fd9\u4e9b\u8303\u5f0f\u4f1a\u544a\u8bc9\u4f60\u5e94\u8be5\u5728\u4ec0\u4e48\u65f6\u5019\u91c7\u7528\u4ec0\u4e48\u6837\u7684\u4ee3\u7801\u7ed3\u6784. \u76f4\u5230\u4eca\u5929, \u6211\u4eec\u4e5f\u4e00\u5171\u53ea\u6709\u4e09\u4e2a\u7f16\u7a0b\u8303\u5f0f, \u800c\u4e14\u672a\u6765\u51e0\u4e4e\u4e0d\u53ef\u80fd\u51fa\u73b0\u65b0\u7684.\\n\\n&ensp;&ensp;&ensp;&ensp;\u6bcf\u4e2a\u7f16\u7a0b\u8303\u5f0f\u90fd\u4ece\u67d0\u4e00\u65b9\u9762`\u9650\u5236`\u548c`\u89c4\u8303`\u4e86\u7a0b\u5e8f\u5458\u7684\u80fd\u529b, \u8fd9\u4e9b\u8303\u5f0f\u4e3b\u8981\u662f\u4e3a\u4e86\u544a\u8bc9\u6211\u4eec\u4e0d\u80fd\u505a\u4ec0\u4e48, \u800c\u4e0d\u662f\u53ef\u4ee5\u505a\u4ec0\u4e48.\\n\\n### 1) \u7ed3\u6784\u5316\u7f16\u7a0b\\n\\n`\u7ed3\u6784\u5316\u7f16\u7a0b\u5bf9\u7a0b\u5e8f\u63a7\u5236\u6743\u7684\u76f4\u63a5\u8f6c\u79fb\u8fdb\u884c\u4e86\u9650\u5236\u548c\u89c4\u8303`\\n\\n\u4e3b\u5f20\u9650\u5236`goto`\u7b49\u65e0\u9650\u5236\u7684\u8df3\u8f6c\u8bed\u53e5, \u4f7f\u7528\u719f\u77e5\u7684`if/then/else/do/while/until`\u7b49\u8bed\u53e5\u6765\u8fdb\u884c\u66ff\u6362\\n\\n### 2) \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\\n\\n`\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u5bf9\u7a0b\u5e8f\u63a7\u5236\u6743\u7684\u95f4\u63a5\u8f6c\u79fb\u8fdb\u884c\u4e86\u9650\u5236\u548c\u89c4\u8303`\\n\\n\u4e09\u5927\u7279\u6027\u4e3a`\u5c01\u88c5`\u3001 `\u7ee7\u627f`\u3001 `\u591a\u6001`, \u6d89\u53ca\u5230\u7684\u6982\u5ff5\u8fd8\u6709`\u63a7\u5236\u53cd\u8f6c`(\u5b9e\u73b0\u65b9\u5f0f\u6709`\u4f9d\u8d56\u6ce8\u5165`), \u73b0\u4ee3\u4ee3\u8868\u8bed\u8a00\u6709 java \u7b49...\\n\\n### 3) \u51fd\u6570\u5f0f\u7f16\u7a0b\\n\\n`\u51fd\u6570\u5f0f\u7f16\u7a0b\u5bf9\u7a0b\u5e8f\u4e2d\u7684\u8d4b\u503c\u8fdb\u884c\u4e86\u9650\u5236\u548c\u89c4\u8303`\\n\\n&ensp;&ensp;&ensp;&ensp;\u4ece\u7406\u8bba\u4e0a\u6765\u8bf4, \u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5e94\u8be5\u662f\u6ca1\u6709\u8d4b\u503c\u8bed\u53e5\u7684, \u5927\u90e8\u5206\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u53ea\u5141\u8bb8\u5728\u975e\u5e38\u4e25\u683c\u7684\u6761\u4ef6\u4e0b, \u624d\u53ef\u4ee5\u66f4\u6539\u67d0\u4e2a\u53d8\u91cf\u7684\u503c.\\n\\n\u5f53\u7136\u4e0a\u9762\u8bf4\u7684\u53ea\u662f\u4e00\u79cd\u601d\u60f3, \u5b9e\u9645\u8fd0\u7528\u8d77\u6765\u80af\u5b9a\u8fd8\u662f\u6709\u5dee\u522b\u7684, \u73b0\u4ee3\u4ee3\u8868\u8bed\u8a00\u6709 golang \u7b49...\\n\\n## 4) SOLID \u8bbe\u8ba1\u539f\u5219\\n\\n&ensp;&ensp;&ensp;&ensp;\u901a\u5e38\u6765\u8bf4, \u60f3\u8981\u6784\u5efa\u4e00\u4e2a\u597d\u7684\u8f6f\u4ef6\u7cfb\u7edf, \u5e94\u8be5\u4ece\u5199\u6574\u6d01\u7684\u4ee3\u7801\u5f00\u59cb(\u53ef\u4ee5\u770b\u770b Bob \u5927\u53d4\u7684\u300a\u4ee3\u7801\u6574\u6d01\u4e4b\u9053\u300b). `SOLID\u8bbe\u8ba1\u539f\u5219`\u5c31\u662f\u7528\u6765\u89e3\u51b3\u8fd9\u6837\u7684\u95ee\u9898, \u544a\u8bc9\u6211\u4eec\u5982\u4f55\u7ec4\u7ec7\u6570\u636e\u548c\u51fd\u6570\u7b49.\\n\\n### 1) S - \u5355\u4e00\u804c\u8d23\u539f\u5219\\n\\n&ensp;&ensp;&ensp;&ensp;\u57fa\u4e8e`\u5eb7\u5a01\u5b9a\u5f8b(Conway\'s Law)`\u7684\u4e00\u4e2a\u63a8\u8bba, \u4e00\u4e2a\u8f6f\u4ef6\u7cfb\u7edf\u7684\u6700\u4f73\u67b6\u6784\u9ad8\u5ea6\u4f9d\u8d56\u4e8e\u5f00\u53d1\u8fd9\u4e2a\u7cfb\u7edf\u7ec4\u7ec7\u7684\u5185\u90e8\u7ed3\u6784. \u8fd9\u6837, \u6bcf\u4e2a\u8f6f\u4ef6\u7684\u6a21\u5757\u90fd\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u9700\u8981\u88ab\u6539\u53d8\u7684\u539f\u5219.\\n\\n\u5eb7\u5a01\u5b9a\u5f8b: \u8f6f\u4ef6\u67b6\u6784\u80fd\u591f\u53cd\u6620\u51fa\u5236\u4f5c\u56e2\u961f\u7684\u7ec4\u7ec7\u67b6\u6784\\n\\n### 2) O - \u5f00\u95ed\u539f\u5219\\n\\n&ensp;&ensp;&ensp;&ensp;\u7531`Bertrand Meyer`\u5728 20 \u4e16\u7eaa 80 \u5e74\u4ee3\u5927\u529b\u63a8\u5e7f, \u6838\u5fc3\u8981\u7d20\u4e3a: \u5982\u679c\u8f6f\u4ef6\u7cfb\u7edf\u8981\u60f3\u66f4\u5bb9\u6613\u88ab\u6539\u53d8, \u90a3\u4e48\u5176\u8bbe\u8ba1\u5c31\u5fc5\u987b\u5141\u8bb8\u65b0\u589e\u4ee3\u7801\u6765\u4fee\u6539\u7cfb\u7edf\u884c\u4e3a, \u800c\u975e\u53ea\u80fd\u9760\u4fee\u6539\u539f\u6765\u7684\u4ee3\u7801.\\n\\n### 3) L - \u91cc\u6c0f\u66ff\u6362\u539f\u5219\\n\\n&ensp;&ensp;&ensp;&ensp;\u7531`Barbara Liskov`\u5728 1988 \u5e74\u63d0\u51fa\u7684\u4e00\u4e2a\u5b50\u7c7b\u578b\u5b9a\u4e49, \u7b80\u800c\u8a00\u4e4b\u4e3a: \u5982\u679c\u8981\u7528\u53ef\u66ff\u6362\u7684\u7ec4\u4ef6\u6765\u6784\u5efa\u8f6f\u4ef6\u7cfb\u7edf, \u90a3\u4e48\u8fd9\u4e9b\u7ec4\u4ef6\u5fc5\u987b\u9075\u5b88\u540c\u4e00\u4e2a\u7ea6\u5b9a, \u4ee5\u4fbf\u8ba9\u8fd9\u4e9b\u7ec4\u4ef6\u53ef\u4ee5\u76f8\u4e92\u66ff\u6362.\\n\\n### 4) I - \u63a5\u53e3\u9694\u79bb\u539f\u5219\\n\\n&ensp;&ensp;&ensp;&ensp;\u4e3b\u8981\u544a\u8beb\u8f6f\u4ef6\u8bbe\u8ba1\u5e08\u5e94\u8be5\u518d\u8bbe\u8ba1\u4e2d\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u4f9d\u8d56\\n\\n### 5) D - \u4f9d\u8d56\u53cd\u8f6c\u539f\u5219\\n\\n&ensp;&ensp;&ensp;&ensp;\u8be5\u8bbe\u8ba1\u539f\u5219\u6307\u51fa: \u9ad8\u5c42\u7b56\u7565\u6027\u7684\u4ee3\u7801\u4e0d\u5e94\u8be5\u4f9d\u8d56\u5b9e\u73b0\u5e95\u5c42\u7ec6\u8282\u7684\u4ee3\u7801, \u6070\u6070\u76f8\u53cd, \u90a3\u4e9b\u5b9e\u73b0\u5e95\u5c42\u7ec6\u8282\u7684\u4ee3\u7801\u5e94\u8be5\u4f9d\u8d56\u9ad8\u5c42\u7b56\u7565\u6027\u7684\u4ee3\u7801\\n\\n## 5) \u8f6f\u4ef6\u67b6\u6784\\n\\n&ensp;&ensp;&ensp;&ensp;Bob \u5927\u53d4\u4e66\u4e2d\u6709\u4e2a\u89c2\u70b9\u6211\u4e2a\u4eba\u975e\u5e38\u8ba4\u53ef. \u9996\u5148, `\u8f6f\u4ef6\u67b6\u6784\u5e08\u81ea\u8eab\u9700\u8981\u662f\u7a0b\u5e8f\u5458, \u5e76\u4e14\u5fc5\u987b\u4e00\u76f4\u575a\u6301\u505a\u4e00\u7ebf\u7a0b\u5e8f\u5458, \u7edd\u5bf9\u4e0d\u8981\u542c\u4ece\u90a3\u4e9b\u8bf4\u5e94\u8be5\u8ba9\u8f6f\u4ef6\u67b6\u6784\u5e08\u4ece\u4ee3\u7801\u4e2d\u89e3\u653e\u51fa\u6765\u4ee5\u4e13\u5fc3\u89e3\u51b3\u9ad8\u9636\u95ee\u9898\u7684\u4f2a\u5efa\u8bae`. \u5982\u679c\u4e0d\u4eb2\u8eab\u627f\u53d7\u56e0\u7cfb\u7edf\u8bbe\u8ba1\u800c\u5e26\u6765\u7684\u9ebb\u70e6, \u5c31\u4f53\u4f1a\u4e0d\u5230\u8bbe\u8ba1\u4e0d\u4f73\u6240\u5e26\u6765\u7684\u7684\u75db\u82e6, \u63a5\u7740\u5c31\u4f1a\u9010\u6e10\u8ff7\u5931\u6b63\u786e\u7684\u8bbe\u8ba1\u65b9\u5411.\\n\\n\u8f6f\u4ef6\u7cfb\u7edf\u7684\u67b6\u6784\u8d28\u91cf\u662f\u7531\u5b83\u7684\u6784\u5efa\u8005\u6240\u51b3\u5b9a\u7684, \u8f6f\u4ef6\u67b6\u6784\u8fd9\u9879\u5de5\u4f5c\u7684\u5b9e\u8d28\u5c31\u662f:\\n\\n`\u89c4\u5212\u5982\u4f55\u5c06\u7cfb\u7edf\u5207\u5206\u4e3a\u7ec4\u4ef6, \u5e76\u4e14\u5b89\u6392\u597d\u7ec4\u4ef6\u4e4b\u95f4\u7684\u6392\u5217\u5173\u7cfb, \u4ee5\u53ca\u7ec4\u4ef6\u4e4b\u95f4\u76f8\u4e92\u901a\u4fe1\u7684\u65b9\u5f0f.`\\n\\n\u5305\u542b\u4ee5\u4e0b\u65b9\u9762:\\n\\n- #### \u5f00\u53d1(Development)\\n- #### \u90e8\u7f72(Deployment)\\n- #### \u8fd0\u884c(Operation)\\n- #### \u7ef4\u62a4(Maintenance)\\n\\n## 6) \u6574\u6d01\u67b6\u6784\\n\\n### 1) \u4e00\u4e9b\u57fa\u672c\u7684\u67b6\u6784\u7279\u70b9\\n\\n- \u516d\u8fb9\u5f62\u67b6\u6784\\n- DCI \u67b6\u6784\\n- BCE \u67b6\u6784\\n\\n\u57fa\u672c\u7279\u70b9:\\n\\n- \u72ec\u7acb\u4e8e\u6846\u67b6\\n- \u53ef\u88ab\u6d4b\u8bd5\\n- \u72ec\u7acb\u4e8e UI\\n- \u72ec\u7acb\u4e8e\u6570\u636e\u5e93\\n- \u72ec\u7acb\u4e8e\u4efb\u4f55\u5916\u90e8\u673a\u6784\\n\\n### 2) \u6574\u6d01\u6784\u5efa\\n\\n&ensp;&ensp;&ensp;&ensp;\u8fd9\u662f Bob \u5927\u53d4\u6839\u636e\u4e00\u822c\u6027\u67b6\u6784\u7279\u70b9\u603b\u7ed3\u51fa\u6765\u7684\u4e00\u4e2a\u72ec\u7acb\u6982\u5ff5\\n\\n![image-20220313120349217](./clean-architecture.assets/image-20220313120349217.png)\\n\\n- ##### \u4f9d\u8d56\u5173\u7cfb\u89c4\u5219\\n\\n&ensp;&ensp;&ensp;&ensp;\u6e90\u7801\u4e2d\u7684\u4f9d\u8d56\u5173\u7cfb\u89c4\u5219\u5fc5\u987b\u53ea\u6307\u5411\u540c\u5fc3\u5706\u7684\u5185\u5c42, \u5373\u7531\u5e95\u5c42\u673a\u5236\u6307\u5411\u9ad8\u5c42\u7b56\u7565\\n\\n- ##### \u4e1a\u52a1\u5b9e\u4f53\\n\\n&ensp;&ensp;&ensp;&ensp;\u4e1a\u52a1\u5b9e\u4f53\u8fd9\u4e00\u5c42\u5c01\u88c5\u7684\u662f\u6574\u4e2a\u7cfb\u7edf\u7684\u5173\u952e\u4e1a\u52a1\u903b\u8f91, \u4e00\u4e2a\u4e1a\u52a1\u5b9e\u4f53\u65e2\u53ef\u4ee5\u662f\u4e00\u4e2a\u5e26\u6709\u65b9\u6cd5\u7684\u5bf9\u8c61, \u4e5f\u53ef\u4ee5\u662f\u4e00\u7ec4\u6570\u636e\u7ed3\u6784\u7684\u96c6\u5408. \u65e0\u8bba\u5982\u4f55, \u53ea\u8981\u5b83\u80fd\u88ab\u7cfb\u7edf\u4e2d\u7684\u5176\u5b83\u4e0d\u540c\u5e94\u7528\u590d\u7528\u5c31\u53ef\u4ee5.\\n\\n- ##### \u7528\u4f8b\\n\\n&ensp;&ensp;&ensp;&ensp;\u901a\u5e38\u5305\u542b\u7684\u662f`\u7279\u5b9a\u5e94\u7528\u573a\u666f\u4e0b`\u7684\u4e1a\u52a1\u903b\u8f91, \u8fd9\u91cc\u9762\u5c01\u88c5\u5e76\u5b9e\u73b0\u4e86\u6574\u4e2a\u7cfb\u7edf\u7684\u6240\u6709\u7528\u4f8b. \u8fd9\u4e9b\u7528\u4f8b\u5f15\u5bfc\u4e86\u6570\u636e\u5728\u4e1a\u52a1\u5b9e\u4f53\u4e4b\u95f4\u7684\u6d41\u5165\u548c\u6d41\u51fa, \u5e76\u6307\u6325\u7740`\u4e1a\u52a1\u5b9e\u4f53`\u5229\u7528\u5176\u4e2d\u7684\u5173\u952e\u4e1a\u52a1\u903b\u8f91\u6765\u5b9e\u73b0\u7528\u4f8b\u7684\u8bbe\u8ba1\u76ee\u6807\\n\\n\u7528\u4f8b\u5c42\u5e94\u8be5\u4e0e`\u4e1a\u52a1\u5b9e\u4f53`\u548c`\u5916\u90e8\u56e0\u7d20`(\u6bd4\u5982\u6570\u636e\u5e93\u3001UI\u3001\u6846\u67b6\u7b49)\u9694\u79bb\\n\\n- ##### \u63a5\u53e3\u9002\u914d\u5668\\n\\n&ensp;&ensp;&ensp;&ensp;\u8f6f\u4ef6\u7684\u63a5\u53e3\u9002\u914d\u5668\u901a\u5e38\u662f\u4e00\u7ec4`\u6570\u636e\u8f6c\u6362\u5668`, \u8f6c\u6362\u6210\u5404\u5c42\u6240\u9700\u8981\u7684\u6570\u636e\u683c\u5f0f\\n\\n- ##### \u6846\u67b6\u4e0e\u9a71\u52a8\u7a0b\u5e8f\\n\\n&ensp;&ensp;&ensp;&ensp;\u6700\u5916\u5c42\u7684`\u6a21\u578b\u5c42`\u4e00\u822c\u662f\u7531\u5de5\u5177\u3001\u6570\u636e\u5e93\u3001Web \u6846\u67b6\u7b49\u7ec4\u6210\u7684, \u5728\u8fd9\u4e00\u5c42\u4e2d, \u6211\u4eec\u901a\u5e38\u53ea\u9700\u8981\u7f16\u5199\u4e00\u4e9b\u4e0e\u5185\u90e8\u6c9f\u901a\u7684\u7c98\u5408\u6027\u4ee3\u7801.\\n\\n&ensp;&ensp;&ensp;&ensp;\u6846\u67b6\u4e0e\u9a71\u52a8\u7a0b\u5e8f\u5c42\u4e2d\u5305\u542b\u4e86\u6240\u6709\u7684\u5b9e\u73b0\u7ec6\u8282. Web \u662f\u5b9e\u73b0\u7ec6\u8282, \u6570\u636e\u5e93\u4e5f\u662f\u5b9e\u73b0\u7ec6\u8282, \u5c06\u8fd9\u4e9b\u5b9e\u73b0\u7ec6\u8282\u653e\u5728\u6700\u5916\u5c42, \u8fd9\u6837\u4ed6\u4eec\u5c31\u5f88\u96be\u5f71\u54cd\u5230\u5176\u5b83\u5c42\u4e86.\\n\\n- ##### \u53ea\u6709\u56db\u5c42\u5417\\n\\n&ensp;&ensp;&ensp;&ensp;\u53ea\u662f\u4e3a\u4e86\u8bf4\u660e\u7ed3\u6784\u548c\u4f9d\u8d56\u5173\u7cfb, \u5e76\u4e0d\u662f\u8868\u793a\u53ea\u80fd\u6709 4 \u5c42. \u6709\u53ef\u80fd\u4f1a\u8d85\u8fc7\u56db\u5c42, \u4f46\u662f\u5176\u4e2d\u7684\u4f9d\u8d56\u5173\u7cfb\u662f\u4e0d\u4f1a\u6539\u53d8\u7684.\\n\\n&ensp;&ensp;&ensp;&ensp;\u6e90\u7801\u5c42\u9762\u7684\u4f9d\u8d56\u5173\u7cfb\u4e00\u5b9a\u8981\u6307\u5411\u540c\u5fc3\u5706\u7684\u5185\u4fa7, \u5c42\u6b21\u8d8a\u5f80\u5185, \u5176\u62bd\u8c61\u548c\u7b56\u7565\u7684\u5c42\u6b21\u5c31\u8d8a\u9ad8, \u5176\u5305\u542b\u7684\u9ad8\u5c42\u7b56\u7565\u5c31\u8d8a\u591a. `\u6700\u5185\u5c42\u7684\u5706\u4e2d\u5305\u542b\u7684\u662f\u6700\u901a\u7528\u3001\u6700\u9ad8\u5c42\u7684\u7b56\u7565, \u6700\u5916\u5c42\u7684\u5706\u5305\u542b\u7684\u662f\u6700\u5177\u4f53\u7684\u7ec6\u8282`\\n\\n&ensp;&ensp;&ensp;&ensp;\u611f\u5174\u8da3\u7684\u540c\u5b66\u8fd8\u53ef\u4ee5\u53bb\u770b\u770b\u73b0\u5728\u5927\u706b\u7684`DDD -\u9886\u57df\u9a71\u52a8\u8bbe\u8ba1 `(Domain Drive Design)\u7684\u601d\u60f3, \u4e0d\u514d\u53ef\u4ee5\u627e\u5230\u4e00\u4e9b\u5171\u901a\u4e4b\u5904.\\n\\n## 7) \u7ed3\u675f\u8bed\\n\\n&ensp;&ensp;&ensp;&ensp;\u5e0c\u671b\u5927\u5bb6\u80fd\u591f\u6709\u6240\u6536\u83b7, \u6210\u4e3a\u81ea\u5df1\u5fc3\u4e2d\u60f3\u6210\u4e3a\u7684\u67b6\u6784\u5e08."},{"id":"docker-and-compose","metadata":{"permalink":"/blog/docker-and-compose","source":"@site/blog/2022-05-24-docker-and-compose.md","title":"Docker And Docker-Compose","description":"1\u3001why docker ?","date":"2022-05-24T18:50:00.000Z","formattedDate":"May 24, 2022","tags":[{"label":"golang","permalink":"/blog/tags/golang"},{"label":"docker","permalink":"/blog/tags/docker"},{"label":"docker-compose","permalink":"/blog/tags/docker-compose"}],"readingTime":4.145,"truncated":true,"authors":[{"name":"sado","title":"Developer","url":"https://github.com/sado0823","imageURL":"/img/avatar.jpeg","key":"sado"}],"frontMatter":{"slug":"docker-and-compose","title":"Docker And Docker-Compose","authors":["sado"],"tags":["golang","docker","docker-compose"],"date":"2022-05-24T18:50"},"prevItem":{"title":"Clean Architecture","permalink":"/blog/clean-architecture"},"nextItem":{"title":"Opentrace Demo","permalink":"/blog/opentrace-demo"}},"content":"## 1\u3001why docker ?\\n\\n![image-20200913225025739](./docker-and-compose.assets/image-20200913225025739.png)\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## 2\u3001about\\n\\n`repository`\u3001`image`\u3001`container`\u3001`tag`\\n\\n![image-20200913230214621](./docker-and-compose.assets/image-20200913230214621.png)\\n\\n\\n\\n## 3\u3001how to use ? \\n\\n### 1) command\\n\\n```js\\n# \u4ee5\u5b88\u62a4\u8fdb\u7a0b\u6a21\u5f0f\u542f\u52a8Docker\\nsudo service docker start\\n\\n# \u8bbe\u7f6e\u5f00\u673a\u81ea\u52a8\u542f\u52a8Docker\\nsystemctl start docker\\n\\n# \u67e5\u770b\u7248\u672c\\ndocker version\\n\\n```\\n\\n```js\\n# \u62c9\u53d6\u955c\u50cf \\ndocker pull name:tag\\ndocker pull nginx\\ndocker pull busybox\\ndocker pull python:2.7\\n\\n# \u67e5\u770b\u955c\u50cf\\ndocker images\\n\\n# \u5220\u9664\u955c\u50cf\\ndocker rmi id\\n\\n# \u67e5\u770b\u5bb9\u5668 \u8fd0\u884c\u4e2d\\ndocker ps\\n\\ndocker ps -a \\n\\n# \u67e5\u770b\u7f51\u7edc (namespace,veth pair)\\ndocker network ls\\n{ bridge, host, none, overlay}\\n\\n```\\n\\n```js\\n# docker run \u542f\u52a8\u5bb9\u5668\\n-d \u540e\u53f0\u8fd0\u884c\\n--name \u6307\u5b9a\u5bb9\u5668\u540d\u79f0\\n-p 80:80 \u7aef\u53e3\u6620\u5c04\\n-v /root:/root \u76ee\u5f55\u6620\u5c04\\n--link \u94fe\u63a5\u5bb9\u5668\\n--nwtwork \u6307\u5b9a\u7f51\u7edc\\n-c \u6dfb\u52a0\u8fd0\u884c\u65f6cmd \u547d\u4ee4\\n-e \u6dfb\u52a0\u73af\u5883\u53d8\u91cf\\n \\n# docker exec name -it \\n-it\\t\u4ea4\u4e92\u6a21\u5f0f\u8fdb\u5165\u5bb9\u5668\\n-i --interactive\\n-t --tty \\t\\n\\n```\\n\\n### 2) example\\n\\n```linux\\n-- \u542f\u52a8nginx\u5bb9\u5668\\ndocker run -it --name web-n1 -p 80:80 -v /var/www/html:/usr/share/nginx/html -d nginx:alpine\\n```\\n\\n![image-20200913233850606](./docker-and-compose.assets/image-20200913233850606.png)\\n\\n```js\\n-- \u542f\u52a8redis\\ndocker run -d --name rds -p 6379:6379 redis\\n```\\n\\n\\n\\n```js\\n-- \u94fe\u63a5\u5bb9\u5668\\ndocker run -d --link rds --name app-1 -e REDIS_HOST=rds app:1.0\\n```\\n\\n\\n\\n### 3) dockerfile\\n\\n```dockerfile\\ndokcerfile\u6784\u5efa:\\n\ufffcFROM  : \u6765\u6e90\u57fa\u7840\u955c\u50cf (scratch -> \u6240\u6709\u955c\u50cf\u539f\u59cb\u955c\u50cf)\\n\ufffcMAINTAINER :  \u4f5c\u8005<\u90ae\u7bb1>\\n\ufffcRUN : \u5bb9\u5668\u6784\u5efa\u9700\u8981\u6267\u884c\u7684\u547d\u4ee4 (\u521b\u5efa\u7528\u6237\u7ec4 , \u521b\u5efa\u6587\u4ef6\u5939 , \u5b89\u88c5\u5305 \u7b49)\\nRUN yum -y install vim \\nRUN yum -y install net-tools\\nRUN mkdir /var/wwwroot \\n\u5efa\u8bae\u5982\u4e0b\u4f7f\u7528 , \u4f7f\u7528 & \u8fde\u63a5 : \\nRUN yum -y install vim \\\\\\n&& yum -y install net-tools \\\\\\n&& mkdir /var/wwwroot \\n\\n\ufffcEXPOSE : \u66b4\u9732\u7684\u7aef\u53e3\u53f7\\n\ufffcWORKDIR : \u6307\u5b9a\u5728\u521b\u5efa\u5e76\u4e14\u8fdb\u53bb\u5bb9\u5668\u7ec8\u7aef\u540e\u7684\u5de5\u4f5c\u76ee\u5f55(\u65e0\u6307\u5b9a\u5230 / \u6839\u76ee\u5f55)\\n\ufffcENV : \u6784\u5efa\u955c\u50cf\u8fc7\u7a0b\u4e2d\u8bbe\u7f6e\u7684\u73af\u5883\u53d8\u91cf \\nENV MY_PATH /var/wwwroot\\nWORKDIR $MY_PATH\\n\\n\ufffcADD : \u5c06\u5bbf\u4e3b\u673a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u62f7\u8d1d\u8fdb\u955c\u50cf , \u5e76\u4e14\u4f1a\u81ea\u52a8\u5904\u7406url\u548c\u89e3\u538btar\u538b\u7f29\u5305\\n\ufffcCOPY : \u7c7b\u4f3cadd , \u62f7\u8d1d\u5230\u955c\u50cf, \u6ca1\u6709\u5904\u7406\u529f\u80fd\\n\ufffcVALUME : \u5bb9\u5668\u6570\u636e\u5377, \u7528\u4e8e\u6570\u636e\u6301\u4e45\u5316 , \u5bb9\u5668\u4e2d\u521b\u5efa\u6307\u5b9a\u7684\u76ee\u5f55\\n\ufffcCMD : \u6307\u5b9a\u5bb9\u5668\u542f\u52a8\u65f6\u8fd0\u884c\u7684\u547d\u4ee4 ( \u591a\u4e2a\u547d\u4ee4\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u751f\u6548 , \u4f1a\u88abdocker run\u4e4b\u540e\u7684\u53c2\u6570\u8986\u76d6)\\n\ufffcENTRYPOINT : \u4e0ecmd\u529f\u80fd\u4e00\u6837 , \u4f1a\u5728docker run\u4e4b\u540e\u7684\u53c2\u6570\u8ffd\u52a0\u547d\u4ee4\\n\ufffcONBUILD : \u5f53\u6784\u5efa\u4e00\u4e2a\u88ab\u7ee7\u627f\u7684dockerfile\u65f6\u8fd0\u884c\u547d\u4ee4,\u7236\u955c\u50cf\u5728\u88ab\u5b50\u955c\u50cf\u7ee7\u627f\u540e\u7236\u955c\u50cf\u7684onbuild\u88ab\u89e6\u53d1\\n```\\n\\n ```dockerfile\\nFROM python:3.7\\n\\nCOPY . /var/www/app\\nWORKDIR /var/www/app\\nRUN pip install flask redis\\nEXPOSE 80\\nCMD [ \\"python\\",\\"app.py\\" ]\\n ```\\n\\n```python\\nfrom flask import Flask\\nfrom redis import Redis\\nimport os\\nimport socket\\n\\napp = Flask(__name__)\\n\\nredis = Redis(host=os.environ.get(\'REDIS_HOST\',\'127.0.0.1\'),prot=6379)\\n\\n@app.route(\\"/\\")\\ndef incr():\\n  redis.incr(\'like\')\\n  return \'current like = %s, current host = %s \\\\n\' % (redis.get(\'like\'),socket.gethostname())\\n\\nif __name__ == \\"__main__\\":\\n  app.run(host=\\"0.0.0.0\\",port=80,debug=True)\\n```\\n\\n``` js\\n# \u4f7f\u7528dockerfile\u6784\u5efa\u955c\u50cf\\ndocker build -t name:tag -f template .\\ndocker build -t app-1:1.0 .\\n\\n# \u8fd0\u884c\u6784\u5efa\u955c\u50cf\\ndocker run -d --link rds-1 --name app-5 -p 80:80 -e REDIS_HOST=rds-1 app-1:3.0\\n\\n# \u8fdb\u5165\u5bb9\u5668\\ndocker exec -it app-5 bash\\ncurl 0.0.0.0:80\\n--\x3e current like = b\'1\', current host = bc33562a73ea\\n--\x3e current like = b\'2\', current host = bc33562a73ea\\n--\x3e current like = b\'3\', current host = bc33562a73ea\\n\\n\\n\\n```\\n\\n\\n\\n### 4) cluster example\\n\\n`etcd + docker`\\n\\n `overlay network`\\n\\n```js\\n/usr/bin/dockerd -H tcp://0.0.0.02375 -H unix:///var/run/docker.sock --cluster-store=etcd://192.168.xxx.xx:2379 --cluster-advertise=192.168.xxx.xx1:2375&\\n\\n/usr/bin/dockerd -H tcp://0.0.0.02375 -H unix:///var/run/docker.sock --cluster-store=etcd://192.168.xxx.xx:2379 --cluster-advertise=192.168.xxx.xx2:2375&\\n```\\n\\n\\n\\n## 4\u3001docker-compose\\n\\n### 1) config yml\\n\\n`docker-compose.yml`\\n\\n```docker-compose\\nversion: \\"3\\"\\n\\nservices: \\n  rds:\\n    image: redis\\n  app:\\n    build: \\n      context: .\\n      dockerfile: Dockerfile\\n      ports: \\n        - 80:80\\n        environment: \\n          REDIS_HOST: rds\\n          \\n\\n```\\n\\n###  2) scale\\n\\n`--scale`\\n\\n`docker-compose up --scale app=3 -d`\\n\\n```docker-compose\\nversion: \'3\'\\n\\nservices:\\n  rds:\\n    image: redis\\n\\n  app:\\n    build:\\n      context: .\\n      dockerfile: Dockerfile\\n    # ports:\\n    # - 80:80\\n    environment:\\n      REDIS_HOST: rds\\n\\n  lib:\\n    image: dockercloud/haproxy\\n    links:\\n      - app\\n    ports:\\n      - 80:80\\n    volumes:\\n      - /var/run/docker.sock:/var/run/docker.sock\\n\\n```\\n\\n### 3) command\\n\\n```js\\ncd ~/path\\ndocker-compose up -d\\ndocker-compose stop\\ndocker-compose restart\\ndocker-compose down\\ndocker-compose build\\n\\n```\\n\\n\\n\\n### 4) cluster\\n\\n```js\\nk8s, swarm\\n```"},{"id":"opentrace-demo","metadata":{"permalink":"/blog/opentrace-demo","source":"@site/blog/2022-05-24-opentrace-demo.md","title":"Opentrace Demo","description":"\u4e00\u3001\u524d\u8a00","date":"2022-05-24T18:40:00.000Z","formattedDate":"May 24, 2022","tags":[{"label":"golang","permalink":"/blog/tags/golang"},{"label":"opentrace","permalink":"/blog/tags/opentrace"},{"label":"gorm","permalink":"/blog/tags/gorm"},{"label":"redis","permalink":"/blog/tags/redis"},{"label":"mysql","permalink":"/blog/tags/mysql"}],"readingTime":6.535,"truncated":true,"authors":[{"name":"sado","title":"Developer","url":"https://github.com/sado0823","imageURL":"/img/avatar.jpeg","key":"sado"}],"frontMatter":{"slug":"opentrace-demo","title":"Opentrace Demo","authors":["sado"],"tags":["golang","opentrace","gorm","redis","mysql"],"date":"2022-05-24T18:40"},"prevItem":{"title":"Docker And Docker-Compose","permalink":"/blog/docker-and-compose"},"nextItem":{"title":"Rpc And Opentrace","permalink":"/blog/rpc-opentrace"}},"content":"## \u4e00\u3001\u524d\u8a00\\n\\n\u200b\\t\\t\u4e0a\u6587\u4ecb\u7ecd\u4e86 `trace` \u7684 \u7531\u6765, \u4ee5\u53ca\u7b80\u5355\u5e94\u7528, \u4eca\u5929\u6211\u4eec\u5c31\u6765\u5b9e\u9645\u7528\u4ee3\u7801\u64cd\u4f5c\u4e00\u4e0b, \u770b\u770b\u5230\u5e95\u5982\u4f55\u7b80\u5355, \u65b9\u4fbf\u7684\u5728\u9879\u76ee\u4e2d\u63a5\u5165 `trace`\\n\\n\u200b\\t\\t\u4e00\u822c\u6211\u4eec\u4f1a\u91c7\u7528\u4e2d\u95f4\u4ef6\u7684\u65b9\u5f0f\u5728web\u5e93\u4e2d\u63a5\u5165, \u5404\u5927\u4e3b\u6d41\u7684web\u5e93(\u5982`gin`,`iris`)\u90fd\u6709\u81ea\u5df1\u7684\u4e2d\u95f4\u4ef6\u65b9\u5f0f, \u6574\u4f53\u4e0a\u90fd\u662f\u5927\u540c\u5c0f\u5f02\u7684, \u7531\u4e8e\u4f5c\u8005\u7684\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u662f`iris`\u5e93, \u4eca\u5929\u6211\u4eec\u91c7\u7528 `iris` \u6765\u8fdb\u884cdemo\u6f14\u793a\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## \u4e8c\u3001\u51c6\u5907\\n\\n1\u3001`iris`  [https://github.com/kataras/iris]\\n\\n2\u3001`redis`  [https://github.com/go-redis/redis]\\n\\n3\u3001`gorm` [https://github.com/go-gorm/gorm]\\n\\n\\n\\n## \u4e09\u3001\u5b9e\u73b0\\n\\n\u200b\\t\\t\u5b9e\u73b0\u7684\u539f\u7406\u5176\u5b9e\u4e5f\u5f88\u7b80\u5355, \u4e3b\u8981\u662f\u901a\u8fc7 `golang` \u7684\u5185\u7f6e\u5305 `context`\u8fdb\u884c\u53d8\u91cf\u4f20\u9012, \u518d\u4e0d\u901a\u8fc7\u7684\u8c03\u7528\u5904\u90fd\u5f00\u542f\u4e00\u4e2a\u65b0\u7684 `span`, \u6700\u7ec8\u6240\u6709\u7684span\u90fd\u8fde\u63a5\u8d77\u6765, \u5c31\u662f\u5b9e\u73b0\u4e86\u6211\u4eec\u7684\u6574\u4e2a\u94fe\u8def\u4e86, \u5176\u5b9e `rpc` \u7684\u8c03\u7528\u901a\u7528\u53ef\u4ee5\u52a0\u4e0a\u53bb\\n\\n\u200b\\t\\t\u539f\u7406\u5f04\u6e05\u695a\u4e4b\u540e, \u5c31\u8981\u5f00\u59cb\u5199\u4ee3\u7801\u4e86, \u90a3\u4e48\u600e\u4e48\u5728`redis`\u4e5f\u597d, `gorm`\u4e5f\u597d, \u6211\u4eec\u4f20\u5165`context`\u7684\u65f6\u5019, \u7a0b\u5e8f\u5c31\u4f1a\u5e2e\u6211\u4eec\u81ea\u52a8\u5904\u7406\u751f\u6210`trace`\u5462?\\n\\n\u200b\\t\\t\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u6211\u4eec\u53bb\u505a\u4e00\u4e9b\u9762\u5411\u5207\u9762\u7684\u4e1c\u897f, `gorm`\u91cc\u9762\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u63d2\u4ef6\u6765\u505a, `redis`\u8fd9\u4e2a\u4e5f\u6709\u540c\u6837\u7684\u5b9e\u73b0\\n\\n\u200b\\t\\t\\n\\n### 1) gorm \u63d2\u4ef6:\\n\\ngorm\u4e2d\u7684\u63d2\u4ef6\u5b9a\u4e49\u662f\u4e3a`interface`\\n\\n```go\\ntype Plugin interface {\\n    Name() string\\n    Initialize(*DB) error\\n}\\nPlugin GORM plugin interface\\n```\\n\\n\u6211\u4eec\u53ea\u9700\u8981\u5b9e\u73b0\u8fd9\u4e2a `interface` \u5373\u53ef\u4f7f\u7528:\\n\\n```go\\nimport (\\n\\t\\"fmt\\"\\n\\t\\"github.com/opentracing/opentracing-go\\"\\n\\t\\"github.com/opentracing/opentracing-go/ext\\"\\n\\ttracerLog \\"github.com/opentracing/opentracing-go/log\\"\\n\\t\\"gorm.io/driver/mysql\\"\\n\\t\\"gorm.io/gorm\\"\\n\\t\\"strings\\"\\n)\\n\\nconst (\\n\\tcallBackBeforeName = \\"opentracing:before\\"\\n\\tcallBackAfterName  = \\"opentracing:after\\"\\n)\\n\\ntype OpenTracingPlugin struct{}\\n\\nvar _ gorm.Plugin = &OpenTracingPlugin{}\\n\\nfunc (op *OpenTracingPlugin) Name() string {\\n\\treturn \\"openTracingPlugin\\"\\n}\\n\\nfunc (op *OpenTracingPlugin) Initialize(db *gorm.DB) (err error) {\\n\\t// \u5f00\u59cb\u524d - \u5e76\u4e0d\u662f\u90fd\u7528\u76f8\u540c\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u81ea\u5df1\u81ea\u5b9a\u4e49\\n\\tdb.Callback().Create().Before(\\"gorm:before_create\\").Register(callBackBeforeName, before)\\n\\tdb.Callback().Query().Before(\\"gorm:query\\").Register(callBackBeforeName, before)\\n\\tdb.Callback().Delete().Before(\\"gorm:before_delete\\").Register(callBackBeforeName, before)\\n\\tdb.Callback().Update().Before(\\"gorm:setup_reflect_value\\").Register(callBackBeforeName, before)\\n\\tdb.Callback().Row().Before(\\"gorm:row\\").Register(callBackBeforeName, before)\\n\\tdb.Callback().Raw().Before(\\"gorm:raw\\").Register(callBackBeforeName, before)\\n\\n\\t// \u7ed3\u675f\u540e - \u5e76\u4e0d\u662f\u90fd\u7528\u76f8\u540c\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u81ea\u5df1\u81ea\u5b9a\u4e49\\n\\tdb.Callback().Create().After(\\"gorm:after_create\\").Register(callBackAfterName, after)\\n\\tdb.Callback().Query().After(\\"gorm:after_query\\").Register(callBackAfterName, after)\\n\\tdb.Callback().Delete().After(\\"gorm:after_delete\\").Register(callBackAfterName, after)\\n\\tdb.Callback().Update().After(\\"gorm:after_update\\").Register(callBackAfterName, after)\\n\\tdb.Callback().Row().After(\\"gorm:row\\").Register(callBackAfterName, after)\\n\\tdb.Callback().Raw().After(\\"gorm:raw\\").Register(callBackAfterName, after)\\n\\treturn\\n}\\n\\n// do logic\\nconst _GormSpan = \\"_GormSpan\\"\\n\\nfunc before(db *gorm.DB) {\\n\\n\\tif !opentracing.IsGlobalTracerRegistered() {\\n\\t\\treturn\\n\\t}\\n\\n\\toperationName := fmt.Sprintf(\\"Mysql - %s\\", db.Statement.Schema.Table)\\n\\n\\tspan, _ := opentracing.StartSpanFromContext(db.Statement.Context, operationName)\\n\\n\\tspan.SetTag(string(ext.DBType), \\"sql\\")\\n\\tspan.SetTag(\\"db.table\\", db.Statement.Schema.Table)\\n\\n\\ta, ok := db.Statement.Config.Dialector.(*mysql.Dialector)\\n\\tif ok {\\n\\t\\tindex := strings.Index(a.DSN, \\"tcp(\\")\\n\\t\\tspan.SetTag(string(ext.DBInstance), a.DSN[index:])\\n\\t}\\n\\n\\t// \u8bb0\u5f55\u5f53\u524dspan\\n\\tdb.InstanceSet(_GormSpan, span)\\n\\n}\\n\\nfunc after(db *gorm.DB) {\\n\\n\\t_span, isExist := db.InstanceGet(_GormSpan)\\n\\tif !isExist {\\n\\t\\treturn\\n\\t}\\n\\n\\tspan, ok := _span.(opentracing.Span)\\n\\tif !ok {\\n\\t\\treturn\\n\\t}\\n\\n\\tdefer span.Finish()\\n\\n\\t// Error\\n\\tif db.Error != nil {\\n\\t\\text.Error.Set(span, true)\\n\\t\\tspan.LogFields(tracerLog.Error(db.Error))\\n\\t}\\n\\n  // \u8bb0\u5f55sql\\n\\tspan.SetTag(string(ext.DBStatement), db.Dialector.Explain(db.Statement.SQL.String(), db.Statement.Vars...))\\n\\tspan.LogFields(tracerLog.String(\\"sql\\", db.Dialector.Explain(db.Statement.SQL.String(), db.Statement.Vars...)))\\n  \\n  // \u8bb0\u5f55\u5f71\u54cd\u884c\u6570\\n\\tspan.SetTag(\\"db.count\\", db.RowsAffected)\\n  \\n  // \u622a\u53d6 sql \u8868\u793a\u8bb0\u5f55\u65b9\u6cd5\\n\\tspan.SetTag(\\"db.method\\", strings.ToUpper(strings.Split(db.Statement.SQL.String(), \\" \\")[0]))\\n\\n}\\n```\\n\\n\u5982\u4f55\u4f7f\u7528 ?\\n\\n```go\\n// \u5b9e\u4f8b\u5316gorm db\u540e, \u76f4\u63a5\u8c03\u7528 use \u65b9\u6cd5\u8fdb\u884c\u63d2\u4ef6\u4f7f\u7528\\n_db.Use(&OpenTracingPlugin{})\\n```\\n\\n\\n\\n\u200b\\t\\n\\n### 2) redis hook\\n\\n\u5728\u6211\u4eec\u4f7f\u7528\u7684 `redis`\u5305\u4e2d, \u4e0a\u8ff0\u529f\u80fd\u53eb\u505a`hook`, \u5176\u5b9e`hook`\u7684\u5b9a\u4e49\u540c\u6837\u4e3a\u4e00\u4e2a`interface`:\\n\\n```go\\ntype Hook interface {\\n    BeforeProcess(ctx context.Context, cmd Cmder) (context.Context, error)\\n    AfterProcess(ctx context.Context, cmd Cmder) error\\n    BeforeProcessPipeline(ctx context.Context, cmds []Cmder) (context.Context, error)\\n    AfterProcessPipeline(ctx context.Context, cmds []Cmder) error\\n}\\n```\\n\\n\u540c\u7406, \u6211\u4eec\u6765\u5b9e\u73b0\u8fd9\u4e2a `interface`:\\n\\n```go\\nimport (\\n\\t\\"context\\"\\n\\t\\"fmt\\"\\n\\t\\"github.com/go-redis/redis/v8\\"\\n\\t\\"github.com/opentracing/opentracing-go\\"\\n\\t\\"github.com/opentracing/opentracing-go/ext\\"\\n\\ttracerLog \\"github.com/opentracing/opentracing-go/log\\"\\n\\t\\"github.com/pkg/errors\\"\\n)\\n\\ntype TracingHook struct{}\\n\\ntype RedisSpanKey string\\n\\nconst _RedisSpan RedisSpanKey = \\"_RedisSpan\\"\\n\\nvar _ redis.Hook = TracingHook{}\\n\\nfunc (TracingHook) BeforeProcess(ctx context.Context, cmd redis.Cmder) (context.Context, error) {\\n\\n\\tif !opentracing.IsGlobalTracerRegistered() {\\n\\t\\treturn ctx, nil\\n\\t}\\n\\n\\toperationName := fmt.Sprintf(\\"Redis - %s\\", cmd.Name())\\n\\tspan, _ := opentracing.StartSpanFromContext(ctx, operationName)\\n\\n\\tspan.SetTag(string(ext.DBType), \\"redis\\")\\n\\tspan.SetTag(\\"redis.name\\", cmd.Name())\\n\\tspan.SetTag(\\"redis.full_name\\", cmd.FullName())\\n\\tspan.LogKV(\\"redis.cmd\\", cmd.String(), \\"redis.args\\", cmd.Args())\\n\\n\\twithValueCtx := context.WithValue(ctx, _RedisSpan, span)\\n\\n\\treturn withValueCtx, nil\\n\\n}\\n\\nfunc (TracingHook) AfterProcess(ctx context.Context, cmd redis.Cmder) error {\\n\\tv := ctx.Value(_RedisSpan)\\n\\tif span, ok := v.(opentracing.Span); ok {\\n\\t\\tdefer span.Finish()\\n\\n\\t\\tif err := cmd.Err(); err != nil && !errors.Is(err, redis.Nil) {\\n\\t\\t\\text.Error.Set(span, true)\\n\\t\\t\\tspan.LogFields(tracerLog.Error(cmd.Err()))\\n\\t\\t}\\n\\n\\t}\\n\\n\\treturn nil\\n}\\n\\nfunc (TracingHook) BeforeProcessPipeline(ctx context.Context, cmds []redis.Cmder) (context.Context, error) {\\n\\n\\tif !opentracing.IsGlobalTracerRegistered() {\\n\\t\\treturn ctx, nil\\n\\t}\\n\\n\\toperationName := fmt.Sprintf(\\"Redis - %s\\", \\"Pipeline\\")\\n\\tspan, _ := opentracing.StartSpanFromContext(ctx, operationName)\\n\\n\\tcmdMap := make(map[int]string)\\n\\tfor index, cmd := range cmds {\\n\\t\\tcmdMap[index] = cmd.String()\\n\\t}\\n\\n\\tspan.SetTag(string(ext.DBType), \\"redis\\")\\n\\tspan.LogKV(\\"Pipeline\\", cmdMap)\\n\\n\\twithValueCtx := context.WithValue(ctx, _RedisSpan, span)\\n\\n\\treturn withValueCtx, nil\\n\\n}\\n\\nfunc (TracingHook) AfterProcessPipeline(ctx context.Context, cmds []redis.Cmder) error {\\n\\tv := ctx.Value(_RedisSpan)\\n\\tif span, ok := v.(opentracing.Span); ok {\\n\\t\\tdefer span.Finish()\\n\\n\\t\\tfor _, cmd := range cmds {\\n\\t\\t\\tif err := cmd.Err(); err != nil {\\n\\t\\t\\t\\text.Error.Set(span, true)\\n\\t\\t\\t\\tspan.LogFields(tracerLog.Error(cmd.Err()))\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t}\\n\\n\\treturn nil\\n\\n}\\n```\\n\\n\\n\\n\u8fd9\u6837\u5728\u6211\u4eec\u5b9e\u4f8b\u5316`redis`\u4e4b\u540e, \u5373\u53ef\u76f4\u63a5\u4f7f\u7528\\n\\n```go\\nredisDB.AddHook(TracingHook{})\\n```\\n\\n\\n\\n### 3) iris middleware\\n\\n\u63a5\u4e0b\u6765, \u6211\u4eec\u9700\u8981\u7f16\u5199\u4e00\u4e2a `iris`\u7684\u4e2d\u95f4\u4ef6, \u8ba9\u6bcf\u6b21\u8bf7\u6c42\u8fdb\u6765\u7684\u65f6\u5019, \u81ea\u52a8\u5f00\u542f\u4e00\u6761\u65b0\u7684\u94fe\u8def\\n\\n```go\\nfunc Trace() iris.Handler {\\n\\treturn func(c iris.Context) {\\n\\n\\t\\tvar parentSpan opentracing.Span\\n\\n\\t\\tspCtx, err := opentracing.GlobalTracer().Extract(opentracing.HTTPHeaders, opentracing.HTTPHeadersCarrier(c.Request().Header))\\n\\t\\tif err != nil {\\n\\t\\t\\tparentSpan = opentracing.GlobalTracer().StartSpan(\\n\\t\\t\\t\\tc.Request().URL.Path,\\n\\t\\t\\t)\\n\\t\\t} else {\\n\\t\\t\\tparentSpan = opentracing.GlobalTracer().StartSpan(\\n\\t\\t\\t\\t\\"call grpc\\",\\n\\t\\t\\t\\topentracing.ChildOf(spCtx),\\n\\t\\t\\t\\text.SpanKindRPCServer,\\n\\t\\t\\t)\\n\\t\\t}\\n\\n\\t\\t// \u91cd\u7f6erequest ctx\\n\\t\\tctx := opentracing.ContextWithSpan(c.Request().Context(), parentSpan)\\n\\t\\tc.ResetRequest(c.Request().WithContext(ctx))\\n\\t\\tdefer parentSpan.Finish()\\n\\n\\t\\tc.Next()\\n\\n\\t}\\n}\\n```\\n\\n\\n\\n4) \u542f\u52a8\\n\\n\u521d\u59cb\u5316\u4e00\u4e2a\u5168\u5c40 `tracer`, \u5e76\u4e14\u542f\u52a8\u670d\u52a1:\\n\\n```go\\npackage main\\n\\nimport (\\n\\t\\"fmt\\"\\n\\t\\"github.com/go-redis/redis/v8\\"\\n\\t\\"github.com/kataras/iris/v12\\"\\n\\t\\"github.com/kataras/iris/v12/context\\"\\n\\t\\"github.com/opentracing/opentracing-go\\"\\n\\t\\"github.com/uber/jaeger-client-go\\"\\n\\tjaegerConfig \\"github.com/uber/jaeger-client-go/config\\"\\n\\t\\"gorm-trace/middleware\\"\\n\\tmysql2 \\"gorm-trace/mysql\\"\\n\\tredis2 \\"gorm-trace/redis\\"\\n\\t\\"gorm.io/driver/mysql\\"\\n\\t\\"gorm.io/gorm\\"\\n\\t\\"time\\"\\n)\\n\\nfunc main() {\\n\\n\\t// \u521d\u59cb\u5316trace\\n\\tcfg := &jaegerConfig.Configuration{\\n\\t\\tSampler: &jaegerConfig.SamplerConfig{\\n\\t\\t\\tType:  \\"const\\", //\u56fa\u5b9a\u91c7\u6837\\n\\t\\t\\tParam: 1,       //1=\u5168\u91c7\u6837\u30010=\u4e0d\u91c7\u6837\\n\\t\\t},\\n\\n\\t\\tReporter: &jaegerConfig.ReporterConfig{\\n\\t\\t\\tLogSpans:           true,\\n\\t\\t\\tLocalAgentHostPort: \\"0.0.0.0:6831\\",\\n\\t\\t},\\n\\n\\t\\tServiceName: \\"test-trace\\",\\n\\t}\\n\\n\\ttracer, closer, err := cfg.NewTracer(jaegerConfig.Logger(jaeger.StdLogger))\\n\\tif err != nil {\\n\\t\\tpanic(fmt.Sprintf(\\"ERROR: cannot init Jaeger: %v\\\\n\\", err.Error()))\\n\\t}\\n\\tdefer closer.Close()\\n\\n\\topentracing.SetGlobalTracer(tracer)\\n\\n\\tapp := iris.New()\\n\\n\\t// \u8c03\u7528trace \u4e2d\u95f4\\n\\tapp.Use(middleware.Trace())\\n\\n\\tapp.Get(\\"/trace\\", func(context context.Context) {\\n\\n\\t\\ttype User struct {\\n\\t\\t\\tID   int64\\n\\t\\t\\tName string\\n\\t\\t}\\n\\t\\tres := make([]*User, 0)\\n\\t\\t// \u521d\u59cb\u5316mysql\\n\\t\\tsqlDB := initMysql()\\n\\t\\tsqlDB.WithContext(context.Request().Context()).Table(\\"users\\").Limit(1).Find(&res)\\n\\n\\t\\t// \u521d\u59cb\u5316redis\\n\\t\\tredisDB := initRedis()\\n\\t\\tredisDB.Set(context.Request().Context(), \\"i-am-key\\", \\"i-am-value\\", time.Hour)\\n\\n\\t})\\n\\n\\terr = app.Listen(\\":7787\\")\\n\\tif err != nil {\\n\\t\\tpanic(\\"init web fail\\")\\n\\t}\\n\\n}\\n\\nfunc initMysql() *gorm.DB {\\n\\tdb, err := gorm.Open(mysql.New(mysql.Config{\\n\\t\\tDSN: fmt.Sprintf(\\"%s/%s?charset=utf8mb4&parseTime=True&loc=Local\\",\\n\\t\\t\\t\\"root:root@tcp(127.0.0.1:3306)\\", \\"gongjiayun\\"), // DSN data source name, parse time is important !!!\\n\\t\\tDefaultStringSize:         256,                     // string default length\\n\\t\\tSkipInitializeWithVersion: true,                    // auto config according to version\\n\\t}), &gorm.Config{})\\n\\tif err != nil {\\n\\t\\tpanic(\\"fail to init mysql: \\" + err.Error())\\n\\t}\\n\\n\\t_ = db.Use(&mysql2.OpenTracingPlugin{})\\n\\n\\treturn db\\n}\\n\\nfunc initRedis() *redis.Client {\\n\\tredisDB := redis.NewClient(&redis.Options{\\n\\t\\tAddr: \\":6379\\",\\n\\t})\\n\\n\\tredisDB.AddHook(redis2.TracingHook{})\\n\\treturn redisDB\\n}\\n\\n```\\n\\n\\n\\n\u200b\\t\\n\\n\\n\\n## \u56db\u3001\u6548\u679c\\n\\n\\n\\n### 1) \u6982\u89c8\\n\\n![image-20210419215247142](./opentrace-demo.assets/image-20210419215247142.png)\\n\\n\\n\\n### 2) mysql\\n\\n![image-20210419215359449](./opentrace-demo.assets/image-20210419215359449.png)\\n\\n\\n\\n### 3) redis\\n\\n![image-20210419215511821](./opentrace-demo.assets/image-20210419215511821.png)\\n\\n\\n\\n\u4ee5\u4e0a\u94fe\u8def\u4e2d\u7684`tag`\u4fe1\u606f\u662f\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u9700\u6c42\u81ea\u5b9a\u4e49\u7684\\n\\n\\n\\n## \u4e94\u3001\u6e90\u7801\\n\\nhttps://github.com/sado0823/gorm-redis-trace"},{"id":"rpc-opentrace","metadata":{"permalink":"/blog/rpc-opentrace","source":"@site/blog/2022-05-24-rpc-opentrace.md","title":"Rpc And Opentrace","description":"1) RPC","date":"2022-05-24T18:37:00.000Z","formattedDate":"May 24, 2022","tags":[{"label":"golang","permalink":"/blog/tags/golang"},{"label":"opentrace","permalink":"/blog/tags/opentrace"},{"label":"grpc","permalink":"/blog/tags/grpc"}],"readingTime":2.86,"truncated":true,"authors":[{"name":"sado","title":"Developer","url":"https://github.com/sado0823","imageURL":"/img/avatar.jpeg","key":"sado"}],"frontMatter":{"slug":"rpc-opentrace","title":"Rpc And Opentrace","authors":["sado"],"tags":["golang","opentrace","grpc"],"date":"2022-05-24T18:37"},"prevItem":{"title":"Opentrace Demo","permalink":"/blog/opentrace-demo"},"nextItem":{"title":"Websocket And Swoft","permalink":"/blog/websocket-swoft"}},"content":"## 1) RPC\\n\\n`Remote Procedure Call`\\n\\n### 1) \u6982\u89c8\\n\\n![image-20201123112838249](./rpc-opentrace.assets/image-20201123112838249.png)\\n\\n\\n\x3c!--truncate--\x3e\\n\\n### 2) \u4f18\u52bf\\n\\n```php\\n\\t\u7b80\u5355\u3001\u901a\u7528\u3001\u5b89\u5168\u3001\u6548\u7387\\n```\\n\\n\\n\\n\\n\\n## 2) GRPC\\n\\n\\n\\n### 1) \u7b80\u4ecb\\n\\n```php\\ngRPC \u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u3001\u5f00\u6e90\u548c\u901a\u7528\u7684 RPC \u6846\u67b6\uff0c\u9762\u5411\u79fb\u52a8\u548c HTTP/2 \u8bbe\u8ba1\\n```\\n\\n\\n\\n`ps: \u591a\u8bed\u8a00\u652f\u6301`\\n\\n- C++\\n- C#\\n- Dart\\n- Go\\n- Java\\n- Node.js\\n- Objective-C\\n- PHP\\n- Python\\n- Ruby\\n\\n\\n\\n### 2) \u6982\u89c8\\n\\n![image-20201123113804847](./rpc-opentrace.assets/image-20201123113804847.png)\\n\\n\\n\\n### 3) Protocol Buffers\\n\\n```php\\nProtocol Buffers\u662f\u4e00\u79cd\u4e0e\u8bed\u8a00\u65e0\u5173\uff0c\u5e73\u53f0\u65e0\u5173\u7684\u53ef\u6269\u5c55\u673a\u5236\uff0c\u7528\u4e8e\u5e8f\u5217\u5316\u7ed3\u6784\u5316\u6570\u636e\u3002\u4f7f\u7528Protocol Buffers\u53ef\u4ee5\u4e00\u6b21\u5b9a\u4e49\u7ed3\u6784\u5316\u7684\u6570\u636e\uff0c\u7136\u540e\u53ef\u4ee5\u4f7f\u7528\u7279\u6b8a\u751f\u6210\u7684\u6e90\u4ee3\u7801\u8f7b\u677e\u5730\u5728\u5404\u79cd\u6570\u636e\u6d41\u4e2d\u4f7f\u7528\u5404\u79cd\u8bed\u8a00\u7f16\u5199\u548c\u8bfb\u53d6\u7ed3\u6784\u5316\u6570\u636e\\n```\\n\\n\u200b\\t\\n\\n\u793a\u4f8b\\n\\n`example.proto`\\n\\n```protobuf\\nsyntax = \\"proto3\\"; // \u7248\u672c\u58f0\u660e\uff0c\u4f7f\u7528Protocol Buffers v3\u7248\u672c\\n\\npackage pb; // \u5305\u540d\\n\\n\\n// \u5b9a\u4e49\u670d\u52a1\\nservice Trainee {\\n\\n    // \u65b9\u6cd5\\n    rpc Sing (HelloRequest) returns (HelloReply) {}\\n    \\n    // \u65b9\u6cd5\\n    rpc Dance (HelloRequest) returns (HelloReply) {}\\n    \\n    // \u65b9\u6cd5\\n    rpc Rap (HelloRequest) returns (HelloReply) {}\\n}\\n\\n// \u8bf7\u6c42\u6d88\u606f\\nmessage HelloRequest {\\n    string name = 1;\\n}\\n\\n// \u54cd\u5e94\u6d88\u606f\\nmessage HelloReply {\\n    string message = 1;\\n}\\n```\\n\\n\\n\\n\\n\\n## 3) opentrace\\n\\n\\n\\n### 1) [ \u5b98\u7f51](https://opentracing.io/)\\n\\n![image-20201123120307807](./rpc-opentrace.assets/image-20201123120307807.png)\\n\\n\\n\\n\\n\\n### 2) \u95ee\u9898\\n\\n```php\\n\u89e3\u8026\u6210\u5927\u91cf\u5fae\u670d\u52a1\u65f6\uff0c\u4ee5\u524d\u5f88\u5bb9\u6613\u5b9e\u73b0\u7684\u91cd\u70b9\u4efb\u52a1\u53d8\u5f97\u56f0\u96be\u4e86\u3002\\n\u8fc7\u7a0b\u4e2d\u9700\u8981\u9762\u4e34\u4e00\u7cfb\u5217\u95ee\u9898\uff1a\u7528\u6237\u4f53\u9a8c\u4f18\u5316\u3001\u540e\u53f0\u9519\u8bef\u539f\u56e0\u5206\u6790\uff0c\u5206\u5e03\u5f0f\u7cfb\u7edf\u5185\u5404\u7ec4\u4ef6\u7684\u8c03\u7528\u60c5\u51b5\u7b49\\n```\\n\\n\\n\\n\\n\\n### 3) why open trace?\\n\\n```php\\nOpenTracing\u901a\u8fc7\u63d0\u4f9b\u5e73\u53f0\u65e0\u5173\u3001\u5382\u5546\u65e0\u5173\u7684API\uff0c\u4f7f\u5f97\u5f00\u53d1\u4eba\u5458\u80fd\u591f\u65b9\u4fbf\u7684\u6dfb\u52a0\uff08\u6216\u66f4\u6362\uff09\u8ffd\u8e2a\u7cfb\u7edf\u7684\u5b9e\u73b0\u3002\\n```\\n\\n```php\\n# \u591a\u8bed\u8a00\u652f\u6301\\nGo, JavaScript, Java, Python, Ruby, PHP, Objective-C, C++, C#\\n```\\n\\n\\n\\n\\n\\n### 4) \u6982\u5ff5\\n\\n#### 1) trace\\n\\n```php\\ntrace\u4ee3\u8868\u4e86\u4e00\u4e2a\u4e8b\u52a1\u6216\u8005\u6d41\u7a0b\u5728\uff08\u5206\u5e03\u5f0f\uff09\u7cfb\u7edf\u4e2d\u7684\u6267\u884c\u8fc7\u7a0b\\n```\\n\\n#### 2) span\\n\\n```php\\nspan\u4ee3\u8868trace\u4e2d\u88ab\u547d\u540d\u5e76\u8ba1\u65f6\u7684\u8fde\u7eed\u6027\u7684\u6267\u884c\u7247\u6bb5\\n```\\n\\n\\n\\n![image-20201123141732427](./rpc-opentrace.assets/image-20201123141732427.png)\\n\\n\\n\\n\\n\\n## 4) jaeger\\n\\n#### 1) [\u5b98\u7f51](https://www.jaegertracing.io/)\\n\\n![image-20201123143744308](./rpc-opentrace.assets/image-20201123143744308.png)\\n\\n\\n\\n\\n\\n#### 2) \u7b80\u4ecb\\n\\n```php\\nJaeger\u662fUber\u7684\u5206\u5e03\u5f0f\u8ddf\u8e2a\u7cfb\u7edf\u3002\\n```\\n\\n![image-20201123143527158](./rpc-opentrace.assets/image-20201123143527158.png)\\n\\n\\n\\n#### 3) \u5b89\u88c5\\n\\n##### 1) `docker`\\n\\n```php\\ndocker run -d --name test-jaeger \\\\\\n  -u root \\\\\\n  --privileged=true \\\\\\n  -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \\\\\\n  -p 5775:5775/udp \\\\\\n  -p 6831:6831/udp \\\\\\n  -p 6832:6832/udp \\\\\\n  -p 5778:5778 \\\\\\n  -p 16686:16686 \\\\\\n  -p 14268:14268 \\\\\\n  -p 14250:14250 \\\\\\n  -p 9411:9411 \\\\\\n  jaegertracing/all-in-one:1.21\\n```\\n\\n\\n\\n##### 2) \u5b98\u7f51\u4e0b\u8f7d\u4e8c\u8fdb\u5236\u6587\u4ef6\\n\\n`...`\\n\\n\\n\\n##### 3) github\u4e0b\u8f7d\u53d1\u884c\u7248\u672c\\n\\n`...`\\n\\n\\n\\n\u6d4f\u89c8\u5668\u8f93\u5165 `http://0.0.0.0:16686/`, \u770b\u5230\u4ee5\u4e0b\u754c\u9762\u5219\u8868\u793a\u6210\u529f\\n\\n![image-20210413094929946](./rpc-opentrace.assets/image-20210413094929946.png)"},{"id":"websocket-swoft","metadata":{"permalink":"/blog/websocket-swoft","source":"@site/blog/2022-05-24-websocket-swool.md","title":"Websocket And Swoft","description":"1.Websocket","date":"2022-05-24T18:35:00.000Z","formattedDate":"May 24, 2022","tags":[{"label":"php","permalink":"/blog/tags/php"},{"label":"websocket","permalink":"/blog/tags/websocket"},{"label":"tcp","permalink":"/blog/tags/tcp"}],"readingTime":17.125,"truncated":false,"authors":[{"name":"sado","title":"Developer","url":"https://github.com/sado0823","imageURL":"/img/avatar.jpeg","key":"sado"}],"frontMatter":{"slug":"websocket-swoft","title":"Websocket And Swoft","authors":["sado"],"tags":["php","websocket","tcp"],"date":"2022-05-24T18:35"},"prevItem":{"title":"Rpc And Opentrace","permalink":"/blog/rpc-opentrace"},"nextItem":{"title":"Second Blog Post","permalink":"/blog/second-blog-post"}},"content":"## 1.Websocket\\n\\n\\n\\n### 1.OSI\u4e03\u5c42\u4e0eTCP/IP\u4e94\u5c42\u6a21\u578b\\n\\n![image-20200415173221790](./websocket-swoft.assets/image-20200415173221790.png)\\n\\n\\n\\n### 2.socket\\n\\n```js\\nSocket\u5b9e\u9645\u4e0a\u662f\u5bf9TCP/IP\u534f\u8bae\u7684\u5c01\u88c5\uff0c\u672c\u8eab\u5e76\u4e0d\u662f\u534f\u8bae\uff0c\u800c\u662f\u4e00\u4e2a\u8c03\u7528\u63a5\u53e3\uff08API\uff09.\\n\\nSocket\u7684\u51fa\u73b0\u53ea\u662f\u4f7f\u5f97\u7a0b\u5e8f\u5458\u66f4\u65b9\u4fbf\u5730\u4f7f\u7528TCP/IP\u534f\u8bae\u6808\u800c\u5df2\uff0c\u662f\u5bf9TCP/IP\u534f\u8bae\u7684\u62bd\u8c61\uff0c\u4ece\u800c\u5f62\u6210\u4e86\u6211\u4eec\u77e5\u9053\u7684\u4e00\u4e9b\u6700\u57fa\u672c\u7684\u51fd\u6570\u63a5\u53e3.\\n\\n\u6bd4\u5982create\u3001listen\u3001connect\u3001accept\u3001send\u3001read\u548cwrite.\\n```\\n\\n\\n\\n### 3.\u7b80\u4ecb\\n\\n```js\\nWebSocket \u662f\u4e00\u79cd\u7f51\u7edc\u901a\u4fe1\u534f\u8bae.\\n\\nWebSocket \u534f\u8bae\u57282008\u5e74\u8bde\u751f\uff0c2011\u5e74\u6210\u4e3a\u56fd\u9645\u6807\u51c6\u3002\u6240\u6709\u6d4f\u89c8\u5668\u90fd\u5df2\u7ecf\u652f\u6301\u4e86.\\n\\n\u670d\u52a1\u5668\u53ef\u4ee5\u4e3b\u52a8\u5411\u5ba2\u6237\u7aef\u63a8\u9001\u4fe1\u606f\uff0c\u5ba2\u6237\u7aef\u4e5f\u53ef\u4ee5\u4e3b\u52a8\u5411\u670d\u52a1\u5668\u53d1\u9001\u4fe1\u606f\uff0c\u5c5e\u4e8e\u670d\u52a1\u5668\u63a8\u9001\u6280\u672f\u7684\u4e00\u79cd\u3002\\n\\n`\u957f\u94fe\u63a5`\\n\\n```\\n\\n```js\\n# \u670d\u52a1\u5668\u63a8\u9001\u6280\u672f\\n1\\tWebpush\\n2\\tHTTP server push\\n3\\tPushlet\\n4\\tLong polling\\n5\\tFlash XMLSocket relays\\n6\\tReliable Group Data Delivery (RGDD)\\n7\\tPush notification\\n```\\n\\n\\n\\n### 4.\u4e0eHTTP\u7684\u5bf9\u6bd4\\n\\n![image-20200415174047471](./websocket-swoft.assets/image-20200415174047471.png)\\n\\n### 5.\u7279\u70b9\\n\\n```js\\n\\n\uff081\uff09\u5efa\u7acb\u5728 TCP \u534f\u8bae\u4e4b\u4e0a\uff0c\u670d\u52a1\u5668\u7aef\u7684\u5b9e\u73b0\u6bd4\u8f83\u5bb9\u6613\u3002\\n\\n\uff082\uff09\u4e0e HTTP \u534f\u8bae\u6709\u7740\u826f\u597d\u7684\u517c\u5bb9\u6027\u3002\u9ed8\u8ba4\u7aef\u53e3\u4e5f\u662f`80`\u548c`443`\uff0c\u5e76\u4e14\u63e1\u624b\u9636\u6bb5\u91c7\u7528 HTTP \u534f\u8bae\uff0c\u56e0\u6b64\u63e1\u624b\u65f6\u4e0d\u5bb9\u6613\u5c4f\u853d\uff0c\u80fd\u901a\u8fc7\u5404\u79cd HTTP \u4ee3\u7406\u670d\u52a1\u5668\u3002\\n\\n\uff083\uff09\u6570\u636e\u683c\u5f0f\u6bd4\u8f83\u8f7b\u91cf\uff0c\u6027\u80fd\u5f00\u9500\u5c0f\uff0c\u901a\u4fe1\u9ad8\u6548\u3002\\n\\n\uff084\uff09\u53ef\u4ee5\u53d1\u9001\u6587\u672c\uff0c\u4e5f\u53ef\u4ee5\u53d1\u9001\u4e8c\u8fdb\u5236\u6570\u636e\u3002\\n\\n\uff085\uff09\u6ca1\u6709`\u540c\u6e90\u9650\u5236`\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u4e0e\u4efb\u610f\u670d\u52a1\u5668\u901a\u4fe1\u3002\\n\\n\uff086\uff09\u534f\u8bae\u6807\u8bc6\u7b26\u662f`ws`\uff08\u5982\u679c\u52a0\u5bc6\uff0c\u5219\u4e3awss\uff09\uff0c\u670d\u52a1\u5668\u7f51\u5740\u5c31\u662f URL\u3002   (scheme)\\n```\\n\\n```js\\nws://example.com:80/uri\\nwss://example.com:80/uri\\n```\\n\\n### 6.\u793a\u4f8b\\n\\n```js\\n# \u5ba2\u6237\u7aef\\nlet ws = new WebSocket(\\"wss://echo.websocket.org\\");\\n\\nws.onopen = function(evt) { \\n  console.log(\\"Connection open ...\\"); \\n  ws.send(\\"Hello WebSockets!\\");\\n};\\n\\nws.onmessage = function(evt) {\\n  console.log( \\"Received Message: \\" + evt.data);\\n  ws.close();\\n};\\n\\nws.onclose = function(evt) {\\n  console.log(\\"Connection closed.\\");\\n};\\n\\n# \u670d\u52a1\u7aef\\nphp -> socket_create(),  new Socket\\npython -> socket,\\ngo -> gorilla/websocket\\nnode -> socket.io / socket.io -client\\n```\\n\\n```js\\n# \u8c03\u8bd5\\nhttps://jsbin.com/?js,console,output\\n```\\n\\n```js\\n# webSocket.readyState\\nreadyState\u5c5e\u6027\u8fd4\u56de\u5b9e\u4f8b\u5bf9\u8c61\u7684\u5f53\u524d\u72b6\u6001\uff0c\u5171\u6709\u56db\u79cd\u3002\\nCONNECTING\uff1a\u503c\u4e3a0\uff0c\u8868\u793a\u6b63\u5728\u8fde\u63a5\u3002\\nOPEN\uff1a\u503c\u4e3a1\uff0c\u8868\u793a\u8fde\u63a5\u6210\u529f\uff0c\u53ef\u4ee5\u901a\u4fe1\u4e86\u3002\\nCLOSING\uff1a\u503c\u4e3a2\uff0c\u8868\u793a\u8fde\u63a5\u6b63\u5728\u5173\u95ed\u3002\\nCLOSED\uff1a\u503c\u4e3a3\uff0c\u8868\u793a\u8fde\u63a5\u5df2\u7ecf\u5173\u95ed\uff0c\u6216\u8005\u6253\u5f00\u8fde\u63a5\u5931\u8d25\u3002\\n```\\n\\n\\n\\n## 2.swoole\\n\\n### 1.\u7b80\u4ecb\\n\\n```js\\n\u4f5c\u8005 \u97e9\u5929\u5cf0 \\npecl\u5f00\u53d1\u7ec4\u6210\u5458\\n\\nphp\u6269\u5c55\\n\\nSwoole \u662f\u4e00\u4e2a PHP \u7684 `\u534f\u7a0b` `\u9ad8\u6027\u80fd` \u7f51\u7edc\u901a\u4fe1\u5f15\u64ce\uff0c\u4f7f\u7528 C/C++ \u8bed\u8a00\u7f16\u5199\uff0c\u63d0\u4f9b\u4e86\u591a\u79cd\u901a\u4fe1\u534f\u8bae\u7684\u7f51\u7edc\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u6a21\u5757\u3002\u53ef\u4ee5\u65b9\u4fbf\u5feb\u901f\u7684\u5b9e\u73b0 TCP/UDP\u670d\u52a1\u3001\u9ad8\u6027\u80fdWeb\u3001WebSocket\u670d\u52a1\u3001\u7269\u8054\u7f51\u3001\u5b9e\u65f6\u901a\u8baf\u3001\u6e38\u620f\u3001\u5fae\u670d\u52a1\u7b49\uff0c\u4f7f PHP \u4e0d\u518d\u5c40\u9650\u4e8e\u4f20\u7edf\u7684 Web \u9886\u57df\u3002\\n\\n4.4+\u4e4b\u540e, \u5168\u9762\u534f\u7a0b\u5316, PHP \u534f\u7a0b\u6846\u67b6 \\n```\\n\\n```js\\n# \u6587\u6863\\nhttps://www.swoole.com/\\n```\\n\\n\\n\\nphp-fpm` \u5904\u7406\u8bf7\u6c42\\n\\n`sapi`---\x3e \u521d\u59cb\u5316http\u7684\u73af\u5883\u53d8\u91cf\\n\\n`phpcore` ---\x3e \u521d\u59cb\u5316php\u62d3\u5c55, \u521d\u59cb\u5316\u4e0a\u4e0b\u6587\u73af\u5883\\n\\n![image-20200417173904872](./websocket-swoft.assets/image-20200417173904872.png)\\n\\n\\n\\n`\u6267\u884cphp\u811a\u672c`\\n\\n![image-20200417173929936](./websocket-swoft.assets/image-20200417173929936.png)\\n\\n\\n\\n### 2.\u793a\u4f8b\\n\\n#### 1.http server\\n\\n```php\\n\\t\\t$http = new Swoole\\\\Http\\\\Server(\\"127.0.0.1\\", 9501);\\n\\n    $http->on(\\"start\\", function ($server) {\\n        echo \\"Swoole http server is started at http://127.0.0.1:9501\\\\n\\";\\n    });\\n\\n    $http->on(\\"request\\", function ($request, $response) {\\n        $response->header(\\"Content-Type\\", \\"text/plain\\");\\n        $response->end(\\"Hello World\\\\n\\");\\n    });\\n\\n    $http->start();\\n```\\n\\n\\n\\n#### 2.websocket server\\n\\n```php\\n\\t\\t$server = new Swoole\\\\Websocket\\\\Server(\\"127.0.0.1\\", 9502);\\n\\n    $server->on(\'open\', function($server, $req) {\\n        echo \\"connection open: {$req->fd}\\\\n\\";\\n    });\\n\\n    $server->on(\'message\', function($server, $frame) {\\n        echo \\"received message: {$frame->data}\\\\n\\";\\n        $server->push($frame->fd, json_encode([\\"hello\\", \\"world\\"]));\\n    });\\n\\n    $server->on(\'close\', function($server, $fd) {\\n        echo \\"connection close: {$fd}\\\\n\\";\\n    });\\n\\n    $server->start();\\n\\n```\\n\\n\\n\\n#### 3.tcp server\\n\\n```php\\n\\t\\t$server = new Swoole\\\\Server(\\"127.0.0.1\\", 9503);\\n    $server->on(\'connect\', function ($server, $fd){\\n        echo \\"connection open: {$fd}\\\\n\\";\\n    });\\n    $server->on(\'receive\', function ($server, $fd, $reactor_id, $data) {\\n        $server->send($fd, \\"Swoole: {$data}\\");\\n        $server->close($fd);\\n    });\\n    $server->on(\'close\', function ($server, $fd) {\\n        echo \\"connection close: {$fd}\\\\n\\";\\n    });\\n    $server->start();\\n```\\n\\n\\n\\n#### 4.udp server\\n\\n```php\\n\\t\\t$serv = new Swoole\\\\Server(\\"127.0.0.1\\", 9502, SWOOLE_PROCESS, SWOOLE_SOCK_UDP);\\n\\n    //\u76d1\u542c\u6570\u636e\u63a5\u6536\u4e8b\u4ef6\\n    $serv->on(\'Packet\', function ($serv, $data, $clientInfo) {\\n        $serv->sendto($clientInfo[\'address\'], $clientInfo[\'port\'], \\"Server \\".$data);\\n        var_dump($clientInfo);\\n    });\\n\\n    //\u542f\u52a8\u670d\u52a1\u5668\\n    $serv->start();\\n```\\n\\n#### 5.task\\n\\n```php\\n$server = new Swoole\\\\Server(\\"127.0.0.1\\", 9502);\\n    $server->set(array(\'task_worker_num\' => 4));\\n    $server->on(\'receive\', function($server, $fd, $reactor_id, $data) {\\n        $task_id = $server->task(\\"Async\\");\\n        echo \\"Dispatch AsyncTask: [id=$task_id]\\\\n\\";\\n    });\\n    $server->on(\'task\', function ($server, $task_id, $reactor_id, $data) {\\n        echo \\"New AsyncTask[id=$task_id]\\\\n\\";\\n        $server->finish(\\"$data -> OK\\");\\n    });\\n    $server->on(\'finish\', function ($server, $task_id, $data) {\\n        echo \\"AsyncTask[$task_id] finished: {$data}\\\\n\\";\\n    });\\n    $server->start();\\n```\\n\\n\\n\\n#### 6.coroutine\\n\\n```php\\n//\u7761\u7720 1 \u4e07\u6b21\uff0c\u8bfb\u53d6\uff0c\u5199\u5165\uff0c\u68c0\u67e5\u548c\u5220\u9664\u6587\u4ef6 1 \u4e07\u6b21\uff0c\u4f7f\u7528 PDO \u548c MySQLi \u4e0e\u6570\u636e\u5e93\u901a\u4fe1 1 \u4e07\u6b21\uff0c\u521b\u5efa TCP \u670d\u52a1\u5668\u548c\u591a\u4e2a\u5ba2\u6237\u7aef\u76f8\u4e92\u901a\u4fe1 1 \u4e07\u6b21\uff0c\\n//\u521b\u5efa UDP \u670d\u52a1\u5668\u548c\u591a\u4e2a\u5ba2\u6237\u7aef\u5230\u76f8\u4e92\u901a\u4fe1 1 \u4e07\u6b21...... \u4e00\u5207\u90fd\u5728\u4e00\u4e2a\u8fdb\u7a0b\u4e00\u79d2\u5185\u5b8c\u7f8e\u5b8c\u6210\uff01\\n\\n   Swoole\\\\Runtime::enableCoroutine();//\u6b64\u884c\u4ee3\u7801\u540e\uff0c\u6587\u4ef6\u64cd\u4f5c\uff0csleep\uff0cMysqli\uff0cPDO\uff0cstreams\u7b49\u90fd\u53d8\u6210\u5f02\u6b65IO\uff0c\u89c1\u6587\u6863\'\u4e00\u952e\u534f\u7a0b\u5316\'\u7ae0\u8282\\n   $s = microtime(true);\\n    //Co/run()\u89c1\u6587\u6863\'\u534f\u7a0b\u5bb9\u5668\'\u7ae0\u8282\\n   Co\\\\run(function() {\\n    // i just want to sleep...\\n    for ($c = 100; $c--;) {\\n        go(function () {\\n            for ($n = 100; $n--;) {\\n                usleep(1000);\\n            }\\n        });\\n    }\\n\\n    // 10k file read and write\\n    for ($c = 100; $c--;) {\\n        go(function () use ($c) {\\n            $tmp_filename = \\"/tmp/test-{$c}.php\\";\\n            for ($n = 100; $n--;) {\\n                $self = file_get_contents(__FILE__);\\n                file_put_contents($tmp_filename, $self);\\n                assert(file_get_contents($tmp_filename) === $self);\\n            }\\n            unlink($tmp_filename);\\n        });\\n    }\\n\\n    // 10k pdo and mysqli read\\n    for ($c = 50; $c--;) {\\n        go(function () {\\n            $pdo = new PDO(\'mysql:host=127.0.0.1;dbname=test;charset=utf8\', \'root\', \'root\');\\n            $statement = $pdo->prepare(\'SELECT * FROM `user`\');\\n            for ($n = 100; $n--;) {\\n                $statement->execute();\\n                assert(count($statement->fetchAll()) > 0);\\n            }\\n        });\\n    }\\n    for ($c = 50; $c--;) {\\n        go(function () {\\n            $mysqli = new Mysqli(\'127.0.0.1\', \'root\', \'root\', \'test\');\\n            $statement = $mysqli->prepare(\'SELECT `id` FROM `user`\');\\n            for ($n = 100; $n--;) {\\n                $statement->bind_result($id);\\n                $statement->execute();\\n                $statement->fetch();\\n                assert($id > 0);\\n            }\\n        });\\n    }\\n\\n    // php_stream tcp server & client with 12.8k requests in single process\\n    function tcp_pack(string $data): string\\n    {\\n        return pack(\'n\', strlen($data)) . $data;\\n    }\\n\\n    function tcp_length(string $head): int\\n    {\\n        return unpack(\'n\', $head)[1];\\n    }\\n\\n    go(function () {\\n        $ctx = stream_context_create([\'socket\' => [\'so_reuseaddr\' => true, \'backlog\' => 128]]);\\n        $socket = stream_socket_server(\\n            \'tcp://0.0.0.0:9502\',\\n            $errno, $errstr, STREAM_SERVER_BIND | STREAM_SERVER_LISTEN, $ctx\\n        );\\n        if (!$socket) {\\n            echo \\"$errstr ($errno)\\\\n\\";\\n        } else {\\n            $i = 0;\\n            while ($conn = stream_socket_accept($socket, 1)) {\\n                stream_set_timeout($conn, 5);\\n                for ($n = 100; $n--;) {\\n                    $data = fread($conn, tcp_length(fread($conn, 2)));\\n                    assert($data === \\"Hello Swoole Server #{$n}!\\");\\n                    fwrite($conn, tcp_pack(\\"Hello Swoole Client #{$n}!\\"));\\n                }\\n                if (++$i === 128) {\\n                    fclose($socket);\\n                    break;\\n                }\\n            }\\n        }\\n    });\\n    for ($c = 128; $c--;) {\\n        go(function () {\\n            $fp = stream_socket_client(\\"tcp://127.0.0.1:9502\\", $errno, $errstr, 1);\\n            if (!$fp) {\\n                echo \\"$errstr ($errno)\\\\n\\";\\n            } else {\\n                stream_set_timeout($fp, 5);\\n                for ($n = 100; $n--;) {\\n                    fwrite($fp, tcp_pack(\\"Hello Swoole Server #{$n}!\\"));\\n                    $data = fread($fp, tcp_length(fread($fp, 2)));\\n                    assert($data === \\"Hello Swoole Client #{$n}!\\");\\n                }\\n                fclose($fp);\\n            }\\n        });\\n    }\\n\\n    // udp server & client with 12.8k requests in single process\\n    go(function () {\\n        $socket = new Swoole\\\\Coroutine\\\\Socket(AF_INET, SOCK_DGRAM, 0);\\n        $socket->bind(\'127.0.0.1\', 9503);\\n        $client_map = [];\\n        for ($c = 128; $c--;) {\\n            for ($n = 0; $n < 100; $n++) {\\n                $recv = $socket->recvfrom($peer);\\n                $client_uid = \\"{$peer[\'address\']}:{$peer[\'port\']}\\";\\n                $id = $client_map[$client_uid] = ($client_map[$client_uid] ?? -1) + 1;\\n                assert($recv === \\"Client: Hello #{$id}!\\");\\n                $socket->sendto($peer[\'address\'], $peer[\'port\'], \\"Server: Hello #{$id}!\\");\\n            }\\n        }\\n        $socket->close();\\n    });\\n    for ($c = 128; $c--;) {\\n        go(function () {\\n            $fp = stream_socket_client(\\"udp://127.0.0.1:9503\\", $errno, $errstr, 1);\\n            if (!$fp) {\\n                echo \\"$errstr ($errno)\\\\n\\";\\n            } else {\\n                for ($n = 0; $n < 100; $n++) {\\n                    fwrite($fp, \\"Client: Hello #{$n}!\\");\\n                    $recv = fread($fp, 1024);\\n                    list($address, $port) = explode(\':\', (stream_socket_get_name($fp, true)));\\n                    assert($address === \'127.0.0.1\' && (int)$port === 9503);\\n                    assert($recv === \\"Server: Hello #{$n}!\\");\\n                }\\n                fclose($fp);\\n            }\\n        });\\n    }\\n  });\\n  echo \'use \' . (microtime(true) - $s) . \' s\';\\n```\\n\\n\\n\\n#### 7.Channel\\n\\n```php\\n Co\\\\run(function(){\\n        //\u4f7f\u7528Channel\u8fdb\u884c\u534f\u7a0b\u95f4\u901a\u8baf\\n        $chan = new Swoole\\\\Coroutine\\\\Channel(1);\\n        Swoole\\\\Coroutine::create(function () use ($chan) {\\n            for($i = 0; $i < 100000; $i++) {\\n                co::sleep(1.0);\\n                $chan->push([\'rand\' => rand(1000, 9999), \'index\' => $i]);\\n                echo \\"$i\\\\n\\";\\n            }\\n        });\\n        Swoole\\\\Coroutine::create(function () use ($chan) {\\n            while(1) {\\n                $data = $chan->pop();\\n                var_dump($data);\\n            }\\n        });\\n  });\\n```\\n\\n\\n\\n### 3.\u98ce\u683c\\n\\n`\u670d\u52a1\u7aef` + `\u5ba2\u6237\u7aef`\\n\\n#### 1.\u5f02\u6b65\u98ce\u683c\\n\\n\\n\\n#### 2.\u534f\u7a0b\u98ce\u683c\\n\\n`\u8fdb\u7a0b`   ---\x3e  `\u7ebf\u7a0b`  ---\x3e   `\u534f\u7a0b`\\t\\n\\n `\u8fde\u63a5\u6c60` (server\u7684manager\u6a21\u5757)\\n\\n \\n\\n```js\\n# \u521b\u5efa\\n`Coroutine::create` \u6216 `go` \u65b9\u6cd5\u521b\u5efa\u534f\u7a0b\\n\\n\u652f\u6301 `waitgroup`\\n```\\n\\n\\n\\n```js\\n# \u901a\u4fe1\u95ee\u9898\\n\\t \u8fdb\u7a0b\\n\\t\\t\\t \u9ad8\u6027\u80fd\u5171\u4eab\u5185\u5b58 `Table`\\n       `Process`\u6a21\u5757 (\u4ee3\u66ffphp\u81ea\u5e26\u7684 `pcntl` )\\n   \u534f\u7a0b\\n       `Coroutine\\\\Channel`\\n    \\t\u5e76\u53d1\u7f16\u7a0b: Coroutine::create() + setdefer()  ->   go() + channel\\n\\n\\n\u9000\u51fa\u534f\u7a0b`exit`\u7981\u7528\\n`\u5f02\u5e38\u6355\u83b7`\u4e0d\u80fd\u8de8\u534f\u7a0b\\n\u5728\u591a\u4e2a\u534f\u7a0b\u95f4\u4e0d\u80fd`\u5171\u7528`\u4e00\u4e2a\u8fde\u63a5\\n\u7981\u6b62\u4f7f\u7528`\u9759\u6001\u7c7b`\u6216\u8005`\u5168\u5c40\u53d8\u91cf`\u4fdd\u5b58\u4e0a\u4e0b\u6587\u5bf9\u8c61\\n`sleep`\u4e0d\u80fd\u7528\\n```\\n\\n\\n\\n### 4.\u57fa\u672c\u987b\u77e5\\n\\n#### 1.\u56db\u79cd\u8bbe\u7f6e\u56de\u8c03\u51fd\u6570\u7684\u65b9\u5f0f\\n\\n```js\\n# \u533f\u540d\u51fd\u6570\\n$server->on(\'Request\', function ($req, $resp) use ($a, $b, $c) {\\n    echo \\"hello world\\";\\n});\\nCopy to clipboardErrorCopied\\n\u53ef\u4f7f\u7528 use \u5411\u533f\u540d\u51fd\u6570\u4f20\u9012\u53c2\u6570\\n```\\n\\n```js\\n# \u7c7b\u9759\u6001\u65b9\u6cd5\\nclass A\\n{\\n    static function test($req, $resp)\\n    {\\n        echo \\"hello world\\";\\n    }\\n}\\n$server->on(\'Request\', \'A::Test\');\\n$server->on(\'Request\', array(\'A\', \'Test\'));\\nCopy to clipboardErrorCopied\\n\u5bf9\u5e94\u7684\u9759\u6001\u65b9\u6cd5\u5fc5\u987b\u4e3a public\\n```\\n\\n```js\\n# \u51fd\u6570\\nfunction my_onRequest($req, $resp)\\n{\\n    echo \\"hello world\\";\\n}\\n$server->on(\'Request\', \'my_onRequest\');\\n\\n```\\n\\n```js\\n# \u5bf9\u8c61\u65b9\u6cd5\\nclass A\\n{\\n    function test($req, $resp)\\n    {\\n        echo \\"hello world\\";\\n    }\\n}\\n$object = new A();\\n$server->on(\'Request\', array($object, \'test\'));\\n\u5bf9\u5e94\u7684\u65b9\u6cd5\u5fc5\u987b\u4e3a public\\n```\\n\\n\\n\\n#### 2.\u540c\u6b65 IO / \u5f02\u6b65 IO\\n\\n```js\\n# \u7f51\u7edcio\u6a21\u578b:\\n\u540c\u6b65\u6a21\u578b\uff08synchronous IO\uff09\\n\u963b\u585eIO\uff08bloking IO\uff09\\n\u975e\u963b\u585eIO\uff08non-blocking IO\uff09\\n\u591a\u8def\u590d\u7528IO\uff08multiplexing IO\uff09 `poll/select`  -> `epoll`\\n\u4fe1\u53f7\u9a71\u52a8\u5f0fIO\uff08signal-driven IO\uff09\\n\u5f02\u6b65IO\uff08asynchronous IO\uff09\\n```\\n\\n\\n\\n#### 3.EventLoop\\n\\n```js\\n\u6240\u8c13 EventLoop\uff0c\u5373\u4e8b\u4ef6\u5faa\u73af\uff0c\u53ef\u4ee5\u7b80\u5355\u7684\u7406\u89e3\u4e3a `epoll_wait`\uff0c\u6211\u4eec\u4f1a\u628a\u6240\u6709\u8981\u53d1\u751f\u4e8b\u4ef6\u7684\u53e5\u67c4\uff08fd\uff09\u52a0\u5165\u5230 epoll_wait \u4e2d\uff0c\u8fd9\u4e9b\u4e8b\u4ef6\u5305\u62ec\u53ef\u8bfb\uff0c\u53ef\u5199\uff0c\u51fa\u9519\u7b49\u3002 \u6211\u4eec\u7684\u8fdb\u7a0b\u5c31\u963b\u585e\u5728 epoll_wait \u8fd9\u4e2a\u5185\u6838\u51fd\u6570\u4e0a\uff0c\u5f53\u53d1\u751f\u4e86\u4e8b\u4ef6 (\u6216\u8d85\u65f6) \u540e epoll_wait \u8fd9\u4e2a\u51fd\u6570\u5c31\u4f1a\u7ed3\u675f\u963b\u585e\u8fd4\u56de\u7ed3\u679c\uff0c\u5c31\u53ef\u4ee5\u56de\u8c03\u76f8\u5e94\u7684 PHP \u51fd\u6570\uff0c\u4f8b\u5982\uff0c\u6536\u5230\u5ba2\u6237\u7aef\u53d1\u6765\u7684\u6570\u636e\uff0c\u56de\u8c03 OnRecieve \u56de\u8c03\u51fd\u6570\u3002\\n\\n\u5f53\u6709\u5927\u91cf\u7684 fd \u653e\u5165\u5230\u4e86 epoll_wait \u4e2d\uff0c\u5e76\u4e14\u540c\u65f6\u4ea7\u751f\u4e86\u5927\u91cf\u7684\u4e8b\u4ef6\uff0cepoll_wait \u51fd\u6570\u8fd4\u56de\u7684\u65f6\u5019\u6211\u4eec\u5c31\u4f1a\u6328\u4e2a\u8c03\u7528\u76f8\u5e94\u7684\u56de\u8c03\u51fd\u6570\uff0c\u53eb\u505a\u4e00\u8f6e\u4e8b\u4ef6\u5faa\u73af\uff0c\u5373 IO \u591a\u8def\u590d\u7528\uff0c\u7136\u540e\u518d\u6b21\u963b\u585e\u8c03\u7528 epoll_wait \u8fdb\u884c\u4e0b\u4e00\u8f6e\u4e8b\u4ef6\u5faa\u73af\u3002\\n```\\n\\n\\n\\n#### 4.TCP\u7c98\u5305\u95ee\u9898\\n\\n```js\\ntcp \u5c01\u5305 \u89e3\u5305 \u7c98\u5305 \\n\u6570\u636e\u5c01\u5305\u534f\u8bae\u89c4\u5b9a\uff1a\u6574\u4e2a\u6570\u636e\u5305\u5305\u542b2\u5b57\u8282\u957f\u5ea6\u4fe1\u606f+\u6570\u636e\u5305\u4f53\u30022\u5b57\u8282\u957f\u5ea6\u4fe1\u606f\u5305\u542b\u672c\u8eab\u77402\u5b57\u8282\u3002\\n\u5982\uff1a\u6570\u636e\u4f53\u662f\uff08abcdefg\uff097\u4e2a\u5b57\u8282\uff0c\u6574\u4f53\u5c01\u5305\u5c31\u662f09abcdefg\uff0c\u603b\u5171\u662f9\u4e2a\u5b57\u8282\u7684\u534f\u8bae\\n```\\n\\n```js\\nEOF \u7ed3\u675f\u7b26\u534f\u8bae\\n\u56fa\u5b9a\u5305\u5934 + \u5305\u4f53\u534f\u8bae\\n```\\n\\n\\n\\n#### 5.IPC\\n\\n```js\\n\u540c\u4e00\u53f0\u4e3b\u673a\u4e0a\u4e24\u4e2a\u8fdb\u7a0b\u95f4\u901a\u4fe1 (`Inter-Process Communication`)\\n```\\n\\n```js\\n\u5728 Swoole \u4e0b\u4f7f\u7528\u4e86 2 \u79cd\u65b9\u5f0f :\\n\\n# Unix Socket :\\n\u5168\u540d UNIX Domain Socket, \u7b80\u79f0 UDS\\nSOCK_STREAM : \u6570\u636e\u5927\u7528 (\u6709\u7c98\u5305\u95ee\u9898)\\nSOCK_DGRAM : \u6570\u636e\u5c0f\u7528 (64k)\\n\\n# sysvmsg :\\nLinux \u63d0\u4f9b\u7684\u6d88\u606f\u961f\u5217\uff0c\u8fd9\u79cd IPC \u65b9\u5f0f\u901a\u8fc7\u4e00\u4e2a\u6587\u4ef6\u540d\u6765\u4f5c\u4e3a key \u8fdb\u884c\u901a\u8baf\uff0c\u8fd9\u79cd\u65b9\u5f0f\u975e\u5e38\u7684\u4e0d\u7075\u6d3b\uff0c\u5b9e\u9645\u9879\u76ee\u4f7f\u7528\u7684\u5e76\u4e0d\u591a\\n```\\n\\n\\n\\n### 5.\u5b89\u88c5\\n\\n`\u6269\u5c55\u51b2\u7a81`\\n\\n```js\\nxdebug\\nphptrace\\naop\\nmolten\\nxhprof\\nphalcon\uff08Swoole \u534f\u7a0b\u65e0\u6cd5\u8fd0\u884c\u5728 phalcon \u6846\u67b6\u4e2d\uff09\\n```\\n\\n`\u5fc5\u987b`\\n\\n```js\\nphp-7.1 \u6216\u66f4\u9ad8\u7248\u672c\\ngcc-4.8 \u6216\u66f4\u9ad8\u7248\u672c\\nmake\\nautoconf\\n```\\n\\n#### 1.\u6e90\u7801\u5b89\u88c5\\n\\n```js\\n#1. \u4e0b\u8f7d swoole \u6e90\u7801\\nhttps://github.com/swoole/swoole-src/releases\\nhttp://pecl.php.net/package/swoole\\nhttp://git.oschina.net/swoole/swoole\\n\\n#2. \u4ece\u6e90\u7801\u7f16\u8bd1\u5b89\u88c5\\n\u4e0b\u8f7d\u6e90\u4ee3\u7801\u5305\u540e\uff0c\u5728\u7ec8\u7aef\u8fdb\u5165\u6e90\u7801\u76ee\u5f55\uff0c\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u8fdb\u884c\u7f16\u8bd1\u548c\u5b89\u88c5\\ncd swoole-src && \\\\\\nphpize && \\\\\\n./configure && \\\\\\n--enable-openssl  \\\\\\n--enable-http2 && \\\\\\nmake && sudo make install\\n\\n#3. \u542f\u7528\u6269\u5c55\\n\u7f16\u8bd1\u5b89\u88c5\u5230\u7cfb\u7edf\u6210\u529f\u540e\uff0c\u9700\u8981\u5728 php.ini \u4e2d\u52a0\u5165\u4e00\u884c extension=swoole.so \u6765\u542f\u7528 Swoole \u6269\u5c55\\n```\\n\\n\\n\\n#### 2.pecl\u5b89\u88c5\\n\\n```js\\npecl install swoole\\n```\\n\\n\\n\\n## 3.swoft\\n\\n`version:2.x`\\n\\n### 1.\u73af\u5883\u51c6\u5907\\n\\n```js\\n#\u5fc5\u8981\u90e8\u5206\\nPHP\uff0c\u7248\u672c >=7.1\\nPHP \u5305\u7ba1\u7406\u5668 Composer\\nPCRE \u5e93\\nPHP \u6269\u5c55 Swoole\uff0c\u7248\u672c >=4.3\\n\u989d\u5916\u6269\u5c55\uff1aPDO\u3001Redis\\n\\n#\u51b2\u7a81\u90e8\u5206\\nXdebug\\nXhprof\\nBlackfire\\nZend\\ntrace\\nUopz\\n```\\n\\n\\n\\n### 2.\u5b89\u88c5\u65b9\u5f0f\\n\\n#### 1.docker\\n\\n```js\\ndocker run -p 18306:18306 --name swoft swoft/swoft\\n```\\n\\n\\n\\n#### 2.docker-compose\\n\\n```js\\ngit clone https://github.com/swoft-cloud/swoft\\ncd swoft\\ndocker-compose up\\n\\n# sserver\u4e0b\u9762\u6709\u4ee5\u4e0b\u6587\u4ef6\u914d\u7f6e\\ndocker-compose.yml\\ndocker-sync -> rsync , native_osx\\n```\\n\\n\\n\\n#### 3.composer\\n\\n```js\\ncomposer create-project swoft/swoft Swoft\\n```\\n\\n\\n\\n#### 4.\u624b\u52a8\u5b89\u88c5\\n\\n```js\\ngit clone https://github.com/swoft-cloud/swoft\\ncd swoft\\ncomposer install\\ncp .env.example .env\\n```\\n\\n\\n\\n#### 5.swoftcli\\n\\n```js\\n# \u652f\u6301\u4ece\u4e0d\u540c\u6a21\u677f\u9879\u76ee\u4e2d\u5feb\u901f\u521b\u5efa\u4e00\u4e2a\u5e72\u51c0\u7684 Swoft \u5e94\u7528\\nphp swoftcli.phar create:app --type full Swoft-Full\\nphp swoftcli.phar create:app --type ws Swoft-WebSocket\\nphp swoftcli.phar create:app --type tcp Swoft-TCP\\n\\n# \u4f7f\u7528\\ncp swoftcli.phar /usr/local/bin/swoftcli && chmod a+x swoftcli\\n```\\n\\n\\n\\n### 3.\u76ee\u5f55\u7ed3\u6784\\n\\n```js\\n\u251c\u2500\u2500 app/    ----- \u5e94\u7528\u4ee3\u7801\u76ee\u5f55\\n\u2502   \u251c\u2500\u2500 Annotation/        ----- \u5b9a\u4e49\u6ce8\u89e3\u76f8\u5173   (`ReflectionCalss`)\\n\u2502   \u251c\u2500\u2500 Aspect/            ----- AOP \u5207\u9762      (`Aspect-oriented programming`)\\n\u2502   \u251c\u2500\u2500 Common/            ----- \u4e00\u4e9b\u5177\u6709\u72ec\u7acb\u529f\u80fd\u7684 class bean\\n\u2502   \u251c\u2500\u2500 Console/           ----- \u547d\u4ee4\u884c\u4ee3\u7801\u76ee\u5f55\\n\u2502   \u251c\u2500\u2500 Exception/         ----- \u5b9a\u4e49\u5f02\u5e38\u7c7b\u76ee\u5f55\\n\u2502   \u2502   \u2514\u2500\u2500 Handler/           ----- \u5b9a\u4e49\u5f02\u5e38\u5904\u7406\u7c7b\u76ee\u5f55\\n\u2502   \u251c\u2500\u2500 Http/              ----- HTTP \u670d\u52a1\u4ee3\u7801\u76ee\u5f55\\n\u2502   \u2502   \u251c\u2500\u2500 Controller/\\n\u2502   \u2502   \u2514\u2500\u2500 Middleware/\\n\u2502   \u251c\u2500\u2500 Helper/            ----- \u52a9\u624b\u51fd\u6570\\n\u2502   \u251c\u2500\u2500 Listener/          ----- \u4e8b\u4ef6\u76d1\u542c\u5668\u76ee\u5f55\\n\u2502   \u251c\u2500\u2500 Model/             ----- \u6a21\u578b\u3001\u903b\u8f91\u7b49\u4ee3\u7801\u76ee\u5f55(\u8fd9\u4e9b\u5c42\u5e76\u4e0d\u9650\u5b9a\uff0c\u6839\u636e\u9700\u8981\u4f7f\u7528)\\n\u2502   \u2502   \u251c\u2500\u2500 Dao/\\n\u2502   \u2502   \u251c\u2500\u2500 Data/\\n\u2502   \u2502   \u251c\u2500\u2500 Logic/\\n\u2502   \u2502   \u2514\u2500\u2500 Entity/\\n\u2502   \u251c\u2500\u2500 Rpc/               ----- RPC \u670d\u52a1\u4ee3\u7801\u76ee\u5f55\\n\u2502   \u2502   \u2514\u2500\u2500 Service/\\n\u2502   \u2502   \u2514\u2500\u2500 Middleware/\\n\u2502   \u251c\u2500\u2500 WebSocket/         ----- WebSocket \u670d\u52a1\u4ee3\u7801\u76ee\u5f55\\n\u2502   \u2502   \u251c\u2500\u2500 Chat/\\n\u2502   \u2502   \u251c\u2500\u2500 Middleware/\\n\u2502   \u2502   \u2514\u2500\u2500 ChatModule.php\\n\u2502   \u251c\u2500\u2500 Tcp/               ----- TCP \u670d\u52a1\u4ee3\u7801\u76ee\u5f55\\n\u2502   \u2502   \u2514\u2500\u2500 Controller/        ----- TCP \u670d\u52a1\u5904\u7406\u63a7\u5236\u5668\u76ee\u5f55\\n\u2502   \u251c\u2500\u2500 Application.php    ----- \u5e94\u7528\u7c7b\u6587\u4ef6\u7ee7\u627f\u81easwoft\u6838\u5fc3\\n\u2502   \u251c\u2500\u2500 AutoLoader.php     ----- \u9879\u76ee\u626b\u63cf\u7b49\u4fe1\u606f(\u5e94\u7528\u672c\u8eab\u4e5f\u7b97\u662f\u4e00\u4e2a\u7ec4\u4ef6)\\n\u2502   \u2514\u2500\u2500 bean.php\\n\u251c\u2500\u2500 bin/\\n\u2502   \u251c\u2500\u2500 bootstrap.php\\n\u2502   \u2514\u2500\u2500 swoft              ----- Swoft \u5165\u53e3\u6587\u4ef6\\n\u251c\u2500\u2500 config/                ----- \u5e94\u7528\u914d\u7f6e\u76ee\u5f55\\n\u2502   \u251c\u2500\u2500 base.php               ----- \u57fa\u7840\u914d\u7f6e\\n\u2502   \u2514\u2500\u2500 db.php                 ----- \u6570\u636e\u5e93\u914d\u7f6e\\n\u251c\u2500\u2500 public/                ----- \u516c\u5171\u76ee\u5f55\\n\u251c\u2500\u2500 resource/              ----- \u5e94\u7528\u8d44\u6e90\u76ee\u5f55\\n\u2502   \u251c\u2500\u2500 language/              ----- \u8bed\u8a00\u8d44\u6e90\u76ee\u5f55  \\n\u2502   \u2514\u2500\u2500 view/                  ----- \u89c6\u56fe\u8d44\u6e90\u76ee\u5f55  \\n\u251c\u2500\u2500 runtime/               ----- \u4e34\u65f6\u6587\u4ef6\u76ee\u5f55\uff08\u65e5\u5fd7\u3001\u4e0a\u4f20\u6587\u4ef6\u3001\u6587\u4ef6\u7f13\u5b58\u7b49\uff09\\n\u251c\u2500\u2500 test/                  ----- \u5355\u5143\u6d4b\u8bd5\u76ee\u5f55\\n\u2502   \u2514\u2500\u2500 bootstrap.php\\n\u251c\u2500\u2500 composer.json\\n\u251c\u2500\u2500 phar.build.inc\\n\u2514\u2500\u2500 phpunit.xml.dist\\n```\\n\\n\\n\\n### 4.\u8fd0\u884c\u670d\u52a1\\n\\n```js\\n\u5982\u679c\u5728 .env \u6587\u4ef6\u4e2d\u5f00\u542f\u4e86\u8c03\u8bd5 SWOFT_DEBUG=1 \u5c06\u4f1a\u5728\u63a7\u5236\u53f0\u4e2d\u663e\u793a\u66f4\u591a\u8be6\u7ec6\u7684\u4fe1\u606f\u3002\\n```\\n\\n\\n\\n#### 1.http server\\n\\n```js\\n# \u542f\u52a8 HTTP \u670d\u52a1\\n$ php ./bin/swoft http:start\\n\\n# \u4ee5\u5b88\u62a4\u8fdb\u7a0b\u6a21\u5f0f\u542f\u52a8\\n$ php ./bin/swoft http:start -d\\n\\n# \u91cd\u542f HTTP \u670d\u52a1\\n$ php ./bin/swoft http:restart\\n\\n# \u91cd\u65b0\u52a0\u8f7d HTTP \u670d\u52a1\\n$ php ./bin/swoft http:reload\\n\\n# \u505c\u6b62 HTTP \u670d\u52a1\\n$ php ./bin/swoft http:stop\\n\\n# swoftcli\\nswoftcli -h\\nswoftcli run -c ws:start\\nswoftcli run -c http:start\\n```\\n\\n\\n\\n#### 2.websocket server\\n\\n```js\\n# \u542f\u52a8 WS \u670d\u52a1\\n$ php ./bin/swoft ws:start\\n\\n# \u4ee5\u5b88\u62a4\u8fdb\u7a0b\u6a21\u5f0f\u542f\u52a8\\n$ php ./bin/swoft ws:start -d\\n\\n# \u91cd\u542f WS \u670d\u52a1\\n$ php ./bin/swoft ws:restart\\n\\n# \u91cd\u65b0\u52a0\u8f7d WS \u670d\u52a1\\n$ php ./bin/swoft ws:reload\\n\\n# \u5173\u95ed WS \u670d\u52a1\\n$ php ./bin/swoft ws:stop\\n```\\n\\n\\n\\n#### 3.rpc server\\n\\n```js\\n# \u542f\u52a8 RPC \u670d\u52a1\\n$ php ./bin/swoft rpc:start\\n\\n# \u4ee5\u5b88\u62a4\u8fdb\u7a0b\u6a21\u5f0f\u542f\u52a8\\n$ php ./bin/swoft rpc:start -d\\n\\n# \u91cd\u542f RPC \u670d\u52a1\\n$ php ./bin/swoft rpc:restart\\n\\n# \u91cd\u65b0\u52a0\u8f7d RPC \u670d\u52a1\\n$ php ./bin/swoft rpc:reload\\n\\n# \u5173\u95ed RPC \u670d\u52a1\\n$ php ./bin/swoft rpc:stop\\n```\\n\\n\\n\\n### 5.\u6ce8\u89e3\\n\\n```php\\nuse Swoft\\\\Http\\\\Message\\\\Request;\\nuse Swoft\\\\Http\\\\Server\\\\Annotation\\\\Mapping\\\\Controller;\\nuse Swoft\\\\Http\\\\Server\\\\Annotation\\\\Mapping\\\\RequestMapping;\\n\\n/**\\n * Class Home\\n *\\n * @Controller(prefix=\\"home\\")\\n */\\nclass Home\\n{\\n    /**\\n     * \u8be5\u65b9\u6cd5\u8def\u7531\u5730\u5740\u4e3a /home/index\\n     *\\n     * @RequestMapping(route=\\"/index\\", method=\\"post\\")\\n     *\\n     * @param Request $request\\n     */\\n    public function index(Request $request)\\n    {\\n        // TODO:\\n    }\\n}\\n```\\n\\n\\n\\n### 6.IoC - DI\\n\\n```js\\nIoC: Inversion of Control\\n```\\n\\n```js\\nDI: Dependency Injection\\n```\\n\\n\\n\\n`Bean\u5bb9\u5668`\\n\\n```js\\n# \u5b9a\u4e49\\n@Bean\\n\u547d\u540d\u7a7a\u95f4\uff1a\\\\Swoft\\\\Bean\\\\Annotation\\\\Bean\\n\\nname \u5b9a\u4e49 Bean \u522b\u540d\uff0c\u7f3a\u7701\u9ed8\u8ba4\u7c7b\u540d\\nscope \u6ce8\u5165 Bean \u7c7b\u578b\uff0c\u9ed8\u8ba4\u5355\u4f8b\uff0cScope::SINGLETON/Scope::PROTOTYPE(\u6bcf\u6b21\u521b\u5efa)\\nref \u6307\u5b9a\u5f15\u7528 Bean \uff0c\u7528\u4e8e\u5b9a\u4e49\u5728\u63a5\u53e3\u4e0a\u9762\uff0c\u6307\u5b9a\u4f7f\u7528\u54ea\u4e2a\u63a5\u53e3\u5b9e\u73b0\u3002\\n```\\n\\n```js\\n# \u6ce8\u5165\\n@Inject\\n\u547d\u540d\u7a7a\u95f4\uff1a\\\\Swoft\\\\Bean\\\\Annotation\\\\Inject\\n\\nname \u5b9a\u4e49\u5c5e\u6027\u6ce8\u5165\u7684bean\u540d\u79f0\uff0c\u7f3a\u7701\u5c5e\u6027\u81ea\u52a8\u7c7b\u578b\u540d\u79f0\\n```\\n\\n```js\\n# \u64cd\u4f5c\\nApp::getBean(\\"name\\");\\nApplicationContext::getBean(\'name\');\\nBeanFactory::getBean(\'name\');\\nBeanFactory::hasBean(\\"name\\");\\n```"},{"id":"second-blog-post","metadata":{"permalink":"/blog/second-blog-post","source":"@site/blog/2022-05-24-second.md","title":"Second Blog Post","description":"2nd coming soon","date":"2022-05-24T18:30:00.000Z","formattedDate":"May 24, 2022","tags":[{"label":"golang","permalink":"/blog/tags/golang"},{"label":"grpc","permalink":"/blog/tags/grpc"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"sado","title":"Developer","url":"https://github.com/sado0823","imageURL":"/img/avatar.jpeg","key":"sado"}],"frontMatter":{"slug":"second-blog-post","title":"Second Blog Post","authors":["sado"],"tags":["golang","grpc"],"date":"2022-05-24T18:30"},"prevItem":{"title":"Websocket And Swoft","permalink":"/blog/websocket-swoft"},"nextItem":{"title":"First Blog Post","permalink":"/blog/first-blog-post"}},"content":"2nd coming soon\\n\\n## 1 title1\\n\\n## 2 title2"},{"id":"first-blog-post","metadata":{"permalink":"/blog/first-blog-post","source":"@site/blog/2022-05-24-first.md","title":"First Blog Post","description":"1st coming soon","date":"2022-05-24T18:00:00.000Z","formattedDate":"May 24, 2022","tags":[{"label":"golang","permalink":"/blog/tags/golang"},{"label":"grpc","permalink":"/blog/tags/grpc"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"sado","title":"Developer","url":"https://github.com/sado0823","imageURL":"/img/avatar.jpeg","key":"sado"}],"frontMatter":{"slug":"first-blog-post","title":"First Blog Post","authors":["sado"],"tags":["golang","grpc"],"date":"2022-05-24T18:00"},"prevItem":{"title":"Second Blog Post","permalink":"/blog/second-blog-post"}},"content":"1st coming soon\\n\\n\\n## 1 title1\\n\\n## 2 title2"}]}')}}]);